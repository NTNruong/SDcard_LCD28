
TH_HTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001758  0800710c  0800710c  0001710c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008864  08008864  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08008864  08008864  00018864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800886c  0800886c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800886c  0800886c  0001886c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          00000200  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  2000021c  2000021c  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fde3  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000291d  00000000  00000000  0002fe2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  00032750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd8  00000000  00000000  00033578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021072  00000000  00000000  00034250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e07  00000000  00000000  000552c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000beddc  00000000  00000000  000670c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00125ea5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003968  00000000  00000000  00125ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080070f4 	.word	0x080070f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080070f4 	.word	0x080070f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 80004d2:	b08e      	sub	sp, #56	; 0x38
 80004d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fca3 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f931 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 fa15 	bl	800090c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 f9eb 	bl	80008bc <MX_DMA_Init>
  MX_SPI1_Init();
 80004e6:	f000 f9b3 	bl	8000850 <MX_SPI1_Init>
  MX_SDIO_SD_Init();
 80004ea:	f000 f991 	bl	8000810 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80004ee:	f003 fdcf 	bl	8004090 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  char file[40];
  LCD_Init();
 80004f2:	f004 f8e5 	bl	80046c0 <LCD_Init>
  LCD_Fill_Color(WHITE);
 80004f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80004fa:	f004 f97f 	bl	80047fc <LCD_Fill_Color>
  HAL_Delay(2000);
 80004fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000502:	f000 fcff 	bl	8000f04 <HAL_Delay>
  LCD_WriteString(0,200,"        Nhom 8       ",Font_11x18,YELLOW,RED);
 8000506:	4b82      	ldr	r3, [pc, #520]	; (8000710 <main+0x244>)
 8000508:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800050c:	9202      	str	r2, [sp, #8]
 800050e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000512:	9201      	str	r2, [sp, #4]
 8000514:	685a      	ldr	r2, [r3, #4]
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a7e      	ldr	r2, [pc, #504]	; (8000714 <main+0x248>)
 800051c:	21c8      	movs	r1, #200	; 0xc8
 800051e:	2000      	movs	r0, #0
 8000520:	f004 fa2a 	bl	8004978 <LCD_WriteString>
  LCD_WriteString(0,218,"Chao thay va cac ban ",Font_11x18,BLUE,BROWN);
 8000524:	4b7a      	ldr	r3, [pc, #488]	; (8000710 <main+0x244>)
 8000526:	f64b 4240 	movw	r2, #48192	; 0xbc40
 800052a:	9202      	str	r2, [sp, #8]
 800052c:	221f      	movs	r2, #31
 800052e:	9201      	str	r2, [sp, #4]
 8000530:	685a      	ldr	r2, [r3, #4]
 8000532:	9200      	str	r2, [sp, #0]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a78      	ldr	r2, [pc, #480]	; (8000718 <main+0x24c>)
 8000538:	21da      	movs	r1, #218	; 0xda
 800053a:	2000      	movs	r0, #0
 800053c:	f004 fa1c 	bl	8004978 <LCD_WriteString>
  LCD_WriteString(0,236,"#####################",Font_11x18,WHITE,BLACK);
 8000540:	4b73      	ldr	r3, [pc, #460]	; (8000710 <main+0x244>)
 8000542:	2200      	movs	r2, #0
 8000544:	9202      	str	r2, [sp, #8]
 8000546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800054a:	9201      	str	r2, [sp, #4]
 800054c:	685a      	ldr	r2, [r3, #4]
 800054e:	9200      	str	r2, [sp, #0]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4a72      	ldr	r2, [pc, #456]	; (800071c <main+0x250>)
 8000554:	21ec      	movs	r1, #236	; 0xec
 8000556:	2000      	movs	r0, #0
 8000558:	f004 fa0e 	bl	8004978 <LCD_WriteString>
  HAL_Delay(1500);
 800055c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000560:	f000 fcd0 	bl	8000f04 <HAL_Delay>
  LCD_Fill_Color(BLACK);
 8000564:	2000      	movs	r0, #0
 8000566:	f004 f949 	bl	80047fc <LCD_Fill_Color>
  FATFS FatFs;   /* Work area (filesystem object) for logical drive */
  FIL fil;        /* File object */
  FRESULT fr;     /* FatFs return code */
  FILINFO fno;
  //
  fr=f_mount(&FatFs, "", 1);
 800056a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800056e:	f103 0308 	add.w	r3, r3, #8
 8000572:	2201      	movs	r2, #1
 8000574:	496a      	ldr	r1, [pc, #424]	; (8000720 <main+0x254>)
 8000576:	4618      	mov	r0, r3
 8000578:	f006 f8a8 	bl	80066cc <f_mount>
 800057c:	4603      	mov	r3, r0
 800057e:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000582:	f102 0227 	add.w	r2, r2, #39	; 0x27
 8000586:	7013      	strb	r3, [r2, #0]
  if(fr==FR_OK){
 8000588:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 800058c:	f103 0327 	add.w	r3, r3, #39	; 0x27
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d10e      	bne.n	80005b4 <main+0xe8>
	  LCD_WriteString(0,3,"...OPENING SD_CARD SUCCESSFUL !!!",Font_7x10,GREEN,BLACK);
 8000596:	4b63      	ldr	r3, [pc, #396]	; (8000724 <main+0x258>)
 8000598:	2200      	movs	r2, #0
 800059a:	9202      	str	r2, [sp, #8]
 800059c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80005a0:	9201      	str	r2, [sp, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	9200      	str	r2, [sp, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a5f      	ldr	r2, [pc, #380]	; (8000728 <main+0x25c>)
 80005aa:	2103      	movs	r1, #3
 80005ac:	2000      	movs	r0, #0
 80005ae:	f004 f9e3 	bl	8004978 <LCD_WriteString>
 80005b2:	e00d      	b.n	80005d0 <main+0x104>
  }
  else{
	  LCD_WriteString(0,3,"...OPENING SD_CARD FAILS !!!      ",Font_7x10,RED,BLACK);
 80005b4:	4b5b      	ldr	r3, [pc, #364]	; (8000724 <main+0x258>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	9202      	str	r2, [sp, #8]
 80005ba:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80005be:	9201      	str	r2, [sp, #4]
 80005c0:	685a      	ldr	r2, [r3, #4]
 80005c2:	9200      	str	r2, [sp, #0]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a59      	ldr	r2, [pc, #356]	; (800072c <main+0x260>)
 80005c8:	2103      	movs	r1, #3
 80005ca:	2000      	movs	r0, #0
 80005cc:	f004 f9d4 	bl	8004978 <LCD_WriteString>
  }
  //
  fr =f_stat("STM.txt", &fno);
 80005d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d4:	3b28      	subs	r3, #40	; 0x28
 80005d6:	4619      	mov	r1, r3
 80005d8:	4855      	ldr	r0, [pc, #340]	; (8000730 <main+0x264>)
 80005da:	f006 fc90 	bl	8006efe <f_stat>
 80005de:	4603      	mov	r3, r0
 80005e0:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80005e4:	f102 0227 	add.w	r2, r2, #39	; 0x27
 80005e8:	7013      	strb	r3, [r2, #0]
  if(fr==FR_OK){
 80005ea:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80005ee:	f103 0327 	add.w	r3, r3, #39	; 0x27
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d10e      	bne.n	8000616 <main+0x14a>
	  LCD_WriteString(0,15,"...FILE READY !!!                ",Font_7x10,GREEN,BLACK);
 80005f8:	4b4a      	ldr	r3, [pc, #296]	; (8000724 <main+0x258>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	9202      	str	r2, [sp, #8]
 80005fe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000602:	9201      	str	r2, [sp, #4]
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	9200      	str	r2, [sp, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a4a      	ldr	r2, [pc, #296]	; (8000734 <main+0x268>)
 800060c:	210f      	movs	r1, #15
 800060e:	2000      	movs	r0, #0
 8000610:	f004 f9b2 	bl	8004978 <LCD_WriteString>
 8000614:	e00d      	b.n	8000632 <main+0x166>
  }
  else{
	  LCD_WriteString(0,15,"...FILE ERROR !!!                ",Font_7x10,RED,BLACK);
 8000616:	4b43      	ldr	r3, [pc, #268]	; (8000724 <main+0x258>)
 8000618:	2200      	movs	r2, #0
 800061a:	9202      	str	r2, [sp, #8]
 800061c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000620:	9201      	str	r2, [sp, #4]
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	9200      	str	r2, [sp, #0]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a43      	ldr	r2, [pc, #268]	; (8000738 <main+0x26c>)
 800062a:	210f      	movs	r1, #15
 800062c:	2000      	movs	r0, #0
 800062e:	f004 f9a3 	bl	8004978 <LCD_WriteString>
  }
  //
  fr = f_open(&fil, "STM.txt",FA_READ);
 8000632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000636:	3b10      	subs	r3, #16
 8000638:	2201      	movs	r2, #1
 800063a:	493d      	ldr	r1, [pc, #244]	; (8000730 <main+0x264>)
 800063c:	4618      	mov	r0, r3
 800063e:	f006 f88b 	bl	8006758 <f_open>
 8000642:	4603      	mov	r3, r0
 8000644:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 8000648:	f102 0227 	add.w	r2, r2, #39	; 0x27
 800064c:	7013      	strb	r3, [r2, #0]
  if(fr==FR_OK){
 800064e:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8000652:	f103 0327 	add.w	r3, r3, #39	; 0x27
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10e      	bne.n	800067a <main+0x1ae>
	  LCD_WriteString(0,27,"...OPENING FILE SUCCESSFUL !!!   ",Font_7x10,GREEN,BLACK);
 800065c:	4b31      	ldr	r3, [pc, #196]	; (8000724 <main+0x258>)
 800065e:	2200      	movs	r2, #0
 8000660:	9202      	str	r2, [sp, #8]
 8000662:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000666:	9201      	str	r2, [sp, #4]
 8000668:	685a      	ldr	r2, [r3, #4]
 800066a:	9200      	str	r2, [sp, #0]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a33      	ldr	r2, [pc, #204]	; (800073c <main+0x270>)
 8000670:	211b      	movs	r1, #27
 8000672:	2000      	movs	r0, #0
 8000674:	f004 f980 	bl	8004978 <LCD_WriteString>
 8000678:	e00d      	b.n	8000696 <main+0x1ca>
  }
  else{
	  LCD_WriteString(0,27,"...FILE ERROR !!!                ",Font_7x10,RED,BLACK);
 800067a:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <main+0x258>)
 800067c:	2200      	movs	r2, #0
 800067e:	9202      	str	r2, [sp, #8]
 8000680:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000684:	9201      	str	r2, [sp, #4]
 8000686:	685a      	ldr	r2, [r3, #4]
 8000688:	9200      	str	r2, [sp, #0]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <main+0x26c>)
 800068e:	211b      	movs	r1, #27
 8000690:	2000      	movs	r0, #0
 8000692:	f004 f971 	bl	8004978 <LCD_WriteString>
  }

  f_gets((uint8_t *)file, f_size(&fil), &fil);
 8000696:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800069a:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800069e:	4619      	mov	r1, r3
 80006a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a4:	3b10      	subs	r3, #16
 80006a6:	f507 5001 	add.w	r0, r7, #8256	; 0x2040
 80006aa:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 80006ae:	461a      	mov	r2, r3
 80006b0:	f006 fc5e 	bl	8006f70 <f_gets>
  HAL_Delay(20);
 80006b4:	2014      	movs	r0, #20
 80006b6:	f000 fc25 	bl	8000f04 <HAL_Delay>
  LCD_WriteString(0,39,&file,Font_11x18,WHITE,BLACK);
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <main+0x244>)
 80006bc:	f507 5101 	add.w	r1, r7, #8256	; 0x2040
 80006c0:	f101 013c 	add.w	r1, r1, #60	; 0x3c
 80006c4:	2200      	movs	r2, #0
 80006c6:	9202      	str	r2, [sp, #8]
 80006c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006cc:	9201      	str	r2, [sp, #4]
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	9200      	str	r2, [sp, #0]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	460a      	mov	r2, r1
 80006d6:	2127      	movs	r1, #39	; 0x27
 80006d8:	2000      	movs	r0, #0
 80006da:	f004 f94d 	bl	8004978 <LCD_WriteString>
  HAL_Delay(2000);
 80006de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006e2:	f000 fc0f 	bl	8000f04 <HAL_Delay>

  f_close(&fil);
 80006e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ea:	3b10      	subs	r3, #16
 80006ec:	4618      	mov	r0, r3
 80006ee:	f006 fbdc 	bl	8006eaa <f_close>
  f_mount(&FatFs, "",0);
 80006f2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80006f6:	f103 0308 	add.w	r3, r3, #8
 80006fa:	2200      	movs	r2, #0
 80006fc:	4908      	ldr	r1, [pc, #32]	; (8000720 <main+0x254>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 ffe4 	bl	80066cc <f_mount>

  LCD_Fill_Color(RED);
 8000704:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000708:	f004 f878 	bl	80047fc <LCD_Fill_Color>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x240>
 800070e:	bf00      	nop
 8000710:	20000014 	.word	0x20000014
 8000714:	0800710c 	.word	0x0800710c
 8000718:	08007124 	.word	0x08007124
 800071c:	0800713c 	.word	0x0800713c
 8000720:	08007154 	.word	0x08007154
 8000724:	2000000c 	.word	0x2000000c
 8000728:	08007158 	.word	0x08007158
 800072c:	0800717c 	.word	0x0800717c
 8000730:	080071a0 	.word	0x080071a0
 8000734:	080071a8 	.word	0x080071a8
 8000738:	080071cc 	.word	0x080071cc
 800073c:	080071f0 	.word	0x080071f0

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	; 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f006 fcc8 	bl	80070e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b27      	ldr	r3, [pc, #156]	; (8000808 <SystemClock_Config+0xc8>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a26      	ldr	r2, [pc, #152]	; (8000808 <SystemClock_Config+0xc8>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b24      	ldr	r3, [pc, #144]	; (8000808 <SystemClock_Config+0xc8>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <SystemClock_Config+0xcc>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <SystemClock_Config+0xcc>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <SystemClock_Config+0xcc>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80007b4:	2332      	movs	r3, #50	; 0x32
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007bc:	2304      	movs	r3, #4
 80007be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fa05 	bl	8001bd4 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007d0:	f000 f91e 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2302      	movs	r3, #2
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fc67 	bl	80020c4 <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007fc:	f000 f908 	bl	8000a10 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3750      	adds	r7, #80	; 0x50
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 8000816:	4a0d      	ldr	r2, [pc, #52]	; (800084c <MX_SDIO_SD_Init+0x3c>)
 8000818:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <MX_SDIO_SD_Init+0x38>)
 800083a:	2204      	movs	r2, #4
 800083c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000038 	.word	0x20000038
 800084c:	40012c00 	.word	0x40012c00

08000850 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_SPI1_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI1_Init+0x64>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI1_Init+0x64>)
 800087c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000880:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_SPI1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI1_Init+0x64>)
 800089c:	220a      	movs	r2, #10
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_SPI1_Init+0x64>)
 80008a2:	f002 fc51 	bl	8003148 <HAL_SPI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 f8b0 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	2000017c 	.word	0x2000017c
 80008b8:	40013000 	.word	0x40013000

080008bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_DMA_Init+0x4c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <MX_DMA_Init+0x4c>)
 80008cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_DMA_Init+0x4c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	203b      	movs	r0, #59	; 0x3b
 80008e4:	f000 fc0d 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008e8:	203b      	movs	r0, #59	; 0x3b
 80008ea:	f000 fc26 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2045      	movs	r0, #69	; 0x45
 80008f4:	f000 fc05 	bl	8001102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008f8:	2045      	movs	r0, #69	; 0x45
 80008fa:	f000 fc1e 	bl	800113a <HAL_NVIC_EnableIRQ>

}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a37      	ldr	r2, [pc, #220]	; (8000a08 <MX_GPIO_Init+0xfc>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a30      	ldr	r2, [pc, #192]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b27      	ldr	r3, [pc, #156]	; (8000a08 <MX_GPIO_Init+0xfc>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	60bb      	str	r3, [r7, #8]
 8000974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_GPIO_Init+0xfc>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_GPIO_Init+0xfc>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <MX_GPIO_Init+0xfc>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_GPIO_Init+0xfc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80009b4:	4815      	ldr	r0, [pc, #84]	; (8000a0c <MX_GPIO_Init+0x100>)
 80009b6:	f001 f8f3 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	2140      	movs	r1, #64	; 0x40
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <MX_GPIO_Init+0x100>)
 80009c0:	f001 f8ee 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCD_DC_Pin;
 80009c4:	f44f 73c2 	mov.w	r3, #388	; 0x184
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0x100>)
 80009de:	f000 ff43 	bl	8001868 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ee:	2302      	movs	r3, #2
 80009f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_GPIO_Init+0x100>)
 80009fa:	f000 ff35 	bl	8001868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <Error_Handler+0x8>
	...

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a6c      	ldr	r2, [pc, #432]	; (8000c3c <HAL_SD_MspInit+0x1d0>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	f040 80d2 	bne.w	8000c34 <HAL_SD_MspInit+0x1c8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	4b6a      	ldr	r3, [pc, #424]	; (8000c40 <HAL_SD_MspInit+0x1d4>)
 8000a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a98:	4a69      	ldr	r2, [pc, #420]	; (8000c40 <HAL_SD_MspInit+0x1d4>)
 8000a9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa0:	4b67      	ldr	r3, [pc, #412]	; (8000c40 <HAL_SD_MspInit+0x1d4>)
 8000aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b63      	ldr	r3, [pc, #396]	; (8000c40 <HAL_SD_MspInit+0x1d4>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	4a62      	ldr	r2, [pc, #392]	; (8000c40 <HAL_SD_MspInit+0x1d4>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6313      	str	r3, [r2, #48]	; 0x30
 8000abc:	4b60      	ldr	r3, [pc, #384]	; (8000c40 <HAL_SD_MspInit+0x1d4>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	4b5c      	ldr	r3, [pc, #368]	; (8000c40 <HAL_SD_MspInit+0x1d4>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a5b      	ldr	r2, [pc, #364]	; (8000c40 <HAL_SD_MspInit+0x1d4>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b59      	ldr	r3, [pc, #356]	; (8000c40 <HAL_SD_MspInit+0x1d4>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000af6:	230c      	movs	r3, #12
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4850      	ldr	r0, [pc, #320]	; (8000c44 <HAL_SD_MspInit+0x1d8>)
 8000b02:	f000 feb1 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b18:	230c      	movs	r3, #12
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4848      	ldr	r0, [pc, #288]	; (8000c44 <HAL_SD_MspInit+0x1d8>)
 8000b24:	f000 fea0 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b30:	2301      	movs	r3, #1
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	2303      	movs	r3, #3
 8000b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	4841      	ldr	r0, [pc, #260]	; (8000c48 <HAL_SD_MspInit+0x1dc>)
 8000b44:	f000 fe90 	bl	8001868 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000b48:	4b40      	ldr	r3, [pc, #256]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b4a:	4a41      	ldr	r2, [pc, #260]	; (8000c50 <HAL_SD_MspInit+0x1e4>)
 8000b4c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000b4e:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b54:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b56:	4b3d      	ldr	r3, [pc, #244]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b5c:	4b3b      	ldr	r3, [pc, #236]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b62:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b68:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b6a:	4b38      	ldr	r3, [pc, #224]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b70:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b78:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000b7a:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b80:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b88:	2204      	movs	r2, #4
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b8e:	2203      	movs	r2, #3
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000b9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ba0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ba2:	482a      	ldr	r0, [pc, #168]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000ba4:	f000 fae4 	bl	8001170 <HAL_DMA_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000bae:	f7ff ff2f 	bl	8000a10 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a25      	ldr	r2, [pc, #148]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb8:	4a24      	ldr	r2, [pc, #144]	; (8000c4c <HAL_SD_MspInit+0x1e0>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000bc0:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <HAL_SD_MspInit+0x1ec>)
 8000bc2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000bc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bca:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bcc:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000bce:	2240      	movs	r2, #64	; 0x40
 8000bd0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000bda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bde:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000be2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000be6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000bea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bee:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c02:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000c04:	2203      	movs	r2, #3
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000c0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c10:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000c12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c16:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000c18:	480e      	ldr	r0, [pc, #56]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000c1a:	f000 faa9 	bl	8001170 <HAL_DMA_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000c24:	f7ff fef4 	bl	8000a10 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000c2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c2e:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <HAL_SD_MspInit+0x1e8>)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	3728      	adds	r7, #40	; 0x28
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40012c00 	.word	0x40012c00
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020c00 	.word	0x40020c00
 8000c4c:	200000bc 	.word	0x200000bc
 8000c50:	40026458 	.word	0x40026458
 8000c54:	2000011c 	.word	0x2000011c
 8000c58:	400264a0 	.word	0x400264a0

08000c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a28      	ldr	r2, [pc, #160]	; (8000d1c <HAL_SPI_MspInit+0xc0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d149      	bne.n	8000d12 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <HAL_SPI_MspInit+0xc4>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <HAL_SPI_MspInit+0xc4>)
 8000c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <HAL_SPI_MspInit+0xc4>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_SPI_MspInit+0xc4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <HAL_SPI_MspInit+0xc4>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_SPI_MspInit+0xc4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_SPI_MspInit+0xc4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <HAL_SPI_MspInit+0xc4>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_SPI_MspInit+0xc4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd2:	23c0      	movs	r3, #192	; 0xc0
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <HAL_SPI_MspInit+0xc8>)
 8000cee:	f000 fdbb 	bl	8001868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d02:	2305      	movs	r3, #5
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <HAL_SPI_MspInit+0xcc>)
 8000d0e:	f000 fdab 	bl	8001868 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40013000 	.word	0x40013000
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020400 	.word	0x40020400

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <NMI_Handler+0x4>

08000d32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <MemManage_Handler+0x4>

08000d3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <BusFault_Handler+0x4>

08000d44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <UsageFault_Handler+0x4>

08000d4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d78:	f000 f8a4 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <DMA2_Stream3_IRQHandler+0x10>)
 8000d86:	f000 faf9 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000bc 	.word	0x200000bc

08000d94 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000d98:	4802      	ldr	r0, [pc, #8]	; (8000da4 <DMA2_Stream6_IRQHandler+0x10>)
 8000d9a:	f000 faef 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	2000011c 	.word	0x2000011c

08000da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df6:	f7ff ffd7 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f006 f94f 	bl	800709c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dfe:	f7ff fb65 	bl	80004cc <main>
  bx  lr    
 8000e02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e10:	08008874 	.word	0x08008874
  ldr r2, =_sbss
 8000e14:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e18:	2000021c 	.word	0x2000021c

08000e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f94f 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	200f      	movs	r0, #15
 8000e50:	f000 f808 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fde2 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_InitTick+0x54>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x58>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f967 	bl	8001156 <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f000 f92f 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	200001d4 	.word	0x200001d4

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200001d4 	.word	0x200001d4

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff ffee 	bl	8000eec <HAL_GetTick>
 8000f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f2a:	bf00      	nop
 8000f2c:	f7ff ffde 	bl	8000eec <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff3e 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff8e 	bl	8001040 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff31 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff feb6 	bl	8000eec <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e099      	b.n	80012c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2202      	movs	r2, #2
 8001190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ac:	e00f      	b.n	80011ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ae:	f7ff fe9d 	bl	8000eec <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d908      	bls.n	80011ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2220      	movs	r2, #32
 80011c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e078      	b.n	80012c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e8      	bne.n	80011ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_DMA_Init+0x158>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4313      	orrs	r3, r2
 800121e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	2b04      	cmp	r3, #4
 8001226:	d107      	bne.n	8001238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4313      	orrs	r3, r2
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4313      	orrs	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	f023 0307 	bic.w	r3, r3, #7
 800124e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4313      	orrs	r3, r2
 8001258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	2b04      	cmp	r3, #4
 8001260:	d117      	bne.n	8001292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4313      	orrs	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00e      	beq.n	8001292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fa7b 	bl	8001770 <DMA_CheckFifoParam>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d008      	beq.n	8001292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2240      	movs	r2, #64	; 0x40
 8001284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800128e:	2301      	movs	r3, #1
 8001290:	e016      	b.n	80012c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fa32 	bl	8001704 <DMA_CalcBaseAndBitshift>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	223f      	movs	r2, #63	; 0x3f
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	f010803f 	.word	0xf010803f

080012cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_DMA_Start_IT+0x26>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e040      	b.n	8001374 <HAL_DMA_Start_IT+0xa8>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d12f      	bne.n	8001366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2202      	movs	r2, #2
 800130a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f000 f9c4 	bl	80016a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001324:	223f      	movs	r2, #63	; 0x3f
 8001326:	409a      	lsls	r2, r3
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0216 	orr.w	r2, r2, #22
 800133a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	2b00      	cmp	r3, #0
 8001342:	d007      	beq.n	8001354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	e005      	b.n	8001372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800136e:	2302      	movs	r3, #2
 8001370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001372:	7dfb      	ldrb	r3, [r7, #23]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001388:	4b8e      	ldr	r3, [pc, #568]	; (80015c4 <HAL_DMA_IRQHandler+0x248>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a8e      	ldr	r2, [pc, #568]	; (80015c8 <HAL_DMA_IRQHandler+0x24c>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0a9b      	lsrs	r3, r3, #10
 8001394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a6:	2208      	movs	r2, #8
 80013a8:	409a      	lsls	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01a      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0204 	bic.w	r2, r2, #4
 80013ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	2208      	movs	r2, #8
 80013d6:	409a      	lsls	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2201      	movs	r2, #1
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d012      	beq.n	800141e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	2201      	movs	r2, #1
 800140c:	409a      	lsls	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f043 0202 	orr.w	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2204      	movs	r2, #4
 8001424:	409a      	lsls	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	2204      	movs	r2, #4
 8001442:	409a      	lsls	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	f043 0204 	orr.w	r2, r3, #4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2210      	movs	r2, #16
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d043      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d03c      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2210      	movs	r2, #16
 8001478:	409a      	lsls	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d018      	beq.n	80014be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d108      	bne.n	80014ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d024      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
 80014aa:	e01f      	b.n	80014ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01b      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
 80014bc:	e016      	b.n	80014ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0208 	bic.w	r2, r2, #8
 80014da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2220      	movs	r2, #32
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 808f 	beq.w	800161c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8087 	beq.w	800161c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001512:	2220      	movs	r2, #32
 8001514:	409a      	lsls	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b05      	cmp	r3, #5
 8001524:	d136      	bne.n	8001594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0216 	bic.w	r2, r2, #22
 8001534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <HAL_DMA_IRQHandler+0x1da>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0208 	bic.w	r2, r2, #8
 8001564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	223f      	movs	r2, #63	; 0x3f
 800156c:	409a      	lsls	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001586:	2b00      	cmp	r3, #0
 8001588:	d07e      	beq.n	8001688 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
        }
        return;
 8001592:	e079      	b.n	8001688 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01d      	beq.n	80015de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10d      	bne.n	80015cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d031      	beq.n	800161c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
 80015c0:	e02c      	b.n	800161c <HAL_DMA_IRQHandler+0x2a0>
 80015c2:	bf00      	nop
 80015c4:	20000000 	.word	0x20000000
 80015c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
 80015dc:	e01e      	b.n	800161c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10f      	bne.n	800160c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0210 	bic.w	r2, r2, #16
 80015fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	2b00      	cmp	r3, #0
 8001622:	d032      	beq.n	800168a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d022      	beq.n	8001676 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2205      	movs	r2, #5
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3301      	adds	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	d307      	bcc.n	8001664 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f2      	bne.n	8001648 <HAL_DMA_IRQHandler+0x2cc>
 8001662:	e000      	b.n	8001666 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001664:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
 8001686:	e000      	b.n	800168a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001688:	bf00      	nop
    }
  }
}
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d108      	bne.n	80016e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016e6:	e007      	b.n	80016f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3b10      	subs	r3, #16
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <DMA_CalcBaseAndBitshift+0x64>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <DMA_CalcBaseAndBitshift+0x68>)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d909      	bls.n	8001746 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	1d1a      	adds	r2, r3, #4
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	659a      	str	r2, [r3, #88]	; 0x58
 8001744:	e007      	b.n	8001756 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800174e:	f023 0303 	bic.w	r3, r3, #3
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	aaaaaaab 	.word	0xaaaaaaab
 800176c:	08007300 	.word	0x08007300

08001770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11f      	bne.n	80017ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d856      	bhi.n	800183e <DMA_CheckFifoParam+0xce>
 8001790:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <DMA_CheckFifoParam+0x28>)
 8001792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001796:	bf00      	nop
 8001798:	080017a9 	.word	0x080017a9
 800179c:	080017bb 	.word	0x080017bb
 80017a0:	080017a9 	.word	0x080017a9
 80017a4:	0800183f 	.word	0x0800183f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d046      	beq.n	8001842 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b8:	e043      	b.n	8001842 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017c2:	d140      	bne.n	8001846 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c8:	e03d      	b.n	8001846 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d2:	d121      	bne.n	8001818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d837      	bhi.n	800184a <DMA_CheckFifoParam+0xda>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <DMA_CheckFifoParam+0x70>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	080017f7 	.word	0x080017f7
 80017e8:	080017f1 	.word	0x080017f1
 80017ec:	08001809 	.word	0x08001809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
      break;
 80017f4:	e030      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d025      	beq.n	800184e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001806:	e022      	b.n	800184e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001810:	d11f      	bne.n	8001852 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001816:	e01c      	b.n	8001852 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d903      	bls.n	8001826 <DMA_CheckFifoParam+0xb6>
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d003      	beq.n	800182c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001824:	e018      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
      break;
 800182a:	e015      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00e      	beq.n	8001856 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
      break;
 800183c:	e00b      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      break;
 800183e:	bf00      	nop
 8001840:	e00a      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 8001842:	bf00      	nop
 8001844:	e008      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
 8001848:	e006      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 800184a:	bf00      	nop
 800184c:	e004      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 800184e:	bf00      	nop
 8001850:	e002      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;   
 8001852:	bf00      	nop
 8001854:	e000      	b.n	8001858 <DMA_CheckFifoParam+0xe8>
      break;
 8001856:	bf00      	nop
    }
  } 
  
  return status; 
 8001858:	7bfb      	ldrb	r3, [r7, #15]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e16b      	b.n	8001b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001884:	2201      	movs	r2, #1
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	429a      	cmp	r2, r3
 800189e:	f040 815a 	bne.w	8001b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d005      	beq.n	80018ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d130      	bne.n	800191c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f0:	2201      	movs	r2, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 0201 	and.w	r2, r3, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0303 	and.w	r3, r3, #3
 8001924:	2b03      	cmp	r3, #3
 8001926:	d017      	beq.n	8001958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	2203      	movs	r2, #3
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d123      	bne.n	80019ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	08da      	lsrs	r2, r3, #3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3208      	adds	r2, #8
 800196c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	08da      	lsrs	r2, r3, #3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3208      	adds	r2, #8
 80019a6:	69b9      	ldr	r1, [r7, #24]
 80019a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0203 	and.w	r2, r3, #3
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80b4 	beq.w	8001b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b60      	ldr	r3, [pc, #384]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	4a5f      	ldr	r2, [pc, #380]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	; 0x44
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_GPIO_Init+0x30c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a0a:	4a5b      	ldr	r2, [pc, #364]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	220f      	movs	r2, #15
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x314>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02b      	beq.n	8001a8e <HAL_GPIO_Init+0x226>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x318>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d025      	beq.n	8001a8a <HAL_GPIO_Init+0x222>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x31c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <HAL_GPIO_Init+0x21e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x320>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d019      	beq.n	8001a82 <HAL_GPIO_Init+0x21a>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_GPIO_Init+0x324>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0x216>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4d      	ldr	r2, [pc, #308]	; (8001b90 <HAL_GPIO_Init+0x328>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d00d      	beq.n	8001a7a <HAL_GPIO_Init+0x212>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4c      	ldr	r2, [pc, #304]	; (8001b94 <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d007      	beq.n	8001a76 <HAL_GPIO_Init+0x20e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4b      	ldr	r2, [pc, #300]	; (8001b98 <HAL_GPIO_Init+0x330>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d101      	bne.n	8001a72 <HAL_GPIO_Init+0x20a>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e00e      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a72:	2308      	movs	r3, #8
 8001a74:	e00c      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e00a      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x228>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x310>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b3b      	ldr	r3, [pc, #236]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a32      	ldr	r2, [pc, #200]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a27      	ldr	r2, [pc, #156]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <HAL_GPIO_Init+0x334>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f ae90 	bls.w	8001884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40013c00 	.word	0x40013c00

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
 8001bac:	4613      	mov	r3, r2
 8001bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb0:	787b      	ldrb	r3, [r7, #1]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bbc:	e003      	b.n	8001bc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bbe:	887b      	ldrh	r3, [r7, #2]
 8001bc0:	041a      	lsls	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	619a      	str	r2, [r3, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e267      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d075      	beq.n	8001cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bf2:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d00c      	beq.n	8001c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bfe:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d112      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0a:	4b82      	ldr	r3, [pc, #520]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c16:	d10b      	bne.n	8001c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c18:	4b7e      	ldr	r3, [pc, #504]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d05b      	beq.n	8001cdc <HAL_RCC_OscConfig+0x108>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d157      	bne.n	8001cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e242      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d106      	bne.n	8001c48 <HAL_RCC_OscConfig+0x74>
 8001c3a:	4b76      	ldr	r3, [pc, #472]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a75      	ldr	r2, [pc, #468]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e01d      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x98>
 8001c52:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6f      	ldr	r2, [pc, #444]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	4b6d      	ldr	r3, [pc, #436]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a6c      	ldr	r2, [pc, #432]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0xb0>
 8001c6c:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a68      	ldr	r2, [pc, #416]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b66      	ldr	r3, [pc, #408]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a65      	ldr	r2, [pc, #404]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d013      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f92e 	bl	8000eec <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff f92a 	bl	8000eec <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e207      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	4b5b      	ldr	r3, [pc, #364]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0xc0>
 8001cb2:	e014      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f91a 	bl	8000eec <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff f916 	bl	8000eec <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1f3      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0xe8>
 8001cda:	e000      	b.n	8001cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d063      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cea:	4b4a      	ldr	r3, [pc, #296]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d11c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d02:	4b44      	ldr	r3, [pc, #272]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_RCC_OscConfig+0x152>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d001      	beq.n	8001d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e1c7      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4937      	ldr	r1, [pc, #220]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	e03a      	b.n	8001db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d44:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <HAL_RCC_OscConfig+0x244>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4a:	f7ff f8cf 	bl	8000eec <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d52:	f7ff f8cb 	bl	8000eec <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e1a8      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4925      	ldr	r1, [pc, #148]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	600b      	str	r3, [r1, #0]
 8001d84:	e015      	b.n	8001db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_RCC_OscConfig+0x244>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff f8ae 	bl	8000eec <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d94:	f7ff f8aa 	bl	8000eec <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e187      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d036      	beq.n	8001e2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d016      	beq.n	8001df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_RCC_OscConfig+0x248>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dcc:	f7ff f88e 	bl	8000eec <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd4:	f7ff f88a 	bl	8000eec <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e167      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_OscConfig+0x240>)
 8001de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x200>
 8001df2:	e01b      	b.n	8001e2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_RCC_OscConfig+0x248>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f877 	bl	8000eec <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e00:	e00e      	b.n	8001e20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e02:	f7ff f873 	bl	8000eec <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d907      	bls.n	8001e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e150      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
 8001e14:	40023800 	.word	0x40023800
 8001e18:	42470000 	.word	0x42470000
 8001e1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1ea      	bne.n	8001e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8097 	beq.w	8001f68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3e:	4b81      	ldr	r3, [pc, #516]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10f      	bne.n	8001e6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a7c      	ldr	r2, [pc, #496]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	4b77      	ldr	r3, [pc, #476]	; (8002048 <HAL_RCC_OscConfig+0x474>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d118      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e76:	4b74      	ldr	r3, [pc, #464]	; (8002048 <HAL_RCC_OscConfig+0x474>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a73      	ldr	r2, [pc, #460]	; (8002048 <HAL_RCC_OscConfig+0x474>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7ff f833 	bl	8000eec <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8a:	f7ff f82f 	bl	8000eec <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e10c      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_OscConfig+0x474>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_OscConfig+0x2ea>
 8001eb0:	4b64      	ldr	r3, [pc, #400]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb4:	4a63      	ldr	r2, [pc, #396]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6713      	str	r3, [r2, #112]	; 0x70
 8001ebc:	e01c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x324>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x30c>
 8001ec6:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eca:	4a5e      	ldr	r2, [pc, #376]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed2:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed6:	4a5b      	ldr	r2, [pc, #364]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6713      	str	r3, [r2, #112]	; 0x70
 8001ede:	e00b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x324>
 8001ee0:	4b58      	ldr	r3, [pc, #352]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	6713      	str	r3, [r2, #112]	; 0x70
 8001eec:	4b55      	ldr	r3, [pc, #340]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef0:	4a54      	ldr	r2, [pc, #336]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	f023 0304 	bic.w	r3, r3, #4
 8001ef6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d015      	beq.n	8001f2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe fff4 	bl	8000eec <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7fe fff0 	bl	8000eec <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e0cb      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1e:	4b49      	ldr	r3, [pc, #292]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0ee      	beq.n	8001f08 <HAL_RCC_OscConfig+0x334>
 8001f2a:	e014      	b.n	8001f56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2c:	f7fe ffde 	bl	8000eec <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f34:	f7fe ffda 	bl	8000eec <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0b5      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1ee      	bne.n	8001f34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f56:	7dfb      	ldrb	r3, [r7, #23]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	4a38      	ldr	r2, [pc, #224]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80a1 	beq.w	80020b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f72:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d05c      	beq.n	8002038 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d141      	bne.n	800200a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_OscConfig+0x478>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe ffae 	bl	8000eec <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe ffaa 	bl	8000eec <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e087      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa6:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69da      	ldr	r2, [r3, #28]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	019b      	lsls	r3, r3, #6
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc8:	085b      	lsrs	r3, r3, #1
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	041b      	lsls	r3, r3, #16
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	491b      	ldr	r1, [pc, #108]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <HAL_RCC_OscConfig+0x478>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe ff83 	bl	8000eec <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fea:	f7fe ff7f 	bl	8000eec <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e05c      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x416>
 8002008:	e054      	b.n	80020b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_RCC_OscConfig+0x478>)
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7fe ff6c 	bl	8000eec <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe ff68 	bl	8000eec <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e045      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_RCC_OscConfig+0x470>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x444>
 8002036:	e03d      	b.n	80020b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e038      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
 8002044:	40023800 	.word	0x40023800
 8002048:	40007000 	.word	0x40007000
 800204c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002050:	4b1b      	ldr	r3, [pc, #108]	; (80020c0 <HAL_RCC_OscConfig+0x4ec>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d028      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002068:	429a      	cmp	r2, r3
 800206a:	d121      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002076:	429a      	cmp	r2, r3
 8002078:	d11a      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002080:	4013      	ands	r3, r2
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002088:	4293      	cmp	r3, r2
 800208a:	d111      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	3b01      	subs	r3, #1
 800209a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023800 	.word	0x40023800

080020c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e0cc      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020d8:	4b68      	ldr	r3, [pc, #416]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d90c      	bls.n	8002100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b65      	ldr	r3, [pc, #404]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b8      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800213a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b50      	ldr	r3, [pc, #320]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	494d      	ldr	r1, [pc, #308]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d044      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d119      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e07f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d003      	beq.n	8002182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800217e:	2b03      	cmp	r3, #3
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e06f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002192:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e067      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f023 0203 	bic.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4934      	ldr	r1, [pc, #208]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b4:	f7fe fe9a 	bl	8000eec <HAL_GetTick>
 80021b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021bc:	f7fe fe96 	bl	8000eec <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e04f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 020c 	and.w	r2, r3, #12
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d1eb      	bne.n	80021bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d20c      	bcs.n	800220c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f2:	4b22      	ldr	r3, [pc, #136]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCC_ClockConfig+0x1b8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e032      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4916      	ldr	r1, [pc, #88]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	4313      	orrs	r3, r2
 8002228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	490e      	ldr	r1, [pc, #56]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800224a:	f000 f821 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800224e:	4602      	mov	r2, r0
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	490a      	ldr	r1, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	5ccb      	ldrb	r3, [r1, r3]
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe fdfa 	bl	8000e64 <HAL_InitTick>

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00
 8002280:	40023800 	.word	0x40023800
 8002284:	080072f0 	.word	0x080072f0
 8002288:	20000000 	.word	0x20000000
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002294:	b090      	sub	sp, #64	; 0x40
 8002296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	637b      	str	r3, [r7, #52]	; 0x34
 800229c:	2300      	movs	r3, #0
 800229e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a0:	2300      	movs	r3, #0
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a8:	4b59      	ldr	r3, [pc, #356]	; (8002410 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d00d      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0x40>
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	f200 80a1 	bhi.w	80023fc <HAL_RCC_GetSysClockFreq+0x16c>
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x34>
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0x3a>
 80022c2:	e09b      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_GetSysClockFreq+0x184>)
 80022c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022c8:	e09b      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ca:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HAL_RCC_GetSysClockFreq+0x188>)
 80022cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022ce:	e098      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d0:	4b4f      	ldr	r3, [pc, #316]	; (8002410 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022da:	4b4d      	ldr	r3, [pc, #308]	; (8002410 <HAL_RCC_GetSysClockFreq+0x180>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d028      	beq.n	8002338 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e6:	4b4a      	ldr	r3, [pc, #296]	; (8002410 <HAL_RCC_GetSysClockFreq+0x180>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	099b      	lsrs	r3, r3, #6
 80022ec:	2200      	movs	r2, #0
 80022ee:	623b      	str	r3, [r7, #32]
 80022f0:	627a      	str	r2, [r7, #36]	; 0x24
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022f8:	2100      	movs	r1, #0
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_GetSysClockFreq+0x188>)
 80022fc:	fb03 f201 	mul.w	r2, r3, r1
 8002300:	2300      	movs	r3, #0
 8002302:	fb00 f303 	mul.w	r3, r0, r3
 8002306:	4413      	add	r3, r2
 8002308:	4a43      	ldr	r2, [pc, #268]	; (8002418 <HAL_RCC_GetSysClockFreq+0x188>)
 800230a:	fba0 1202 	umull	r1, r2, r0, r2
 800230e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002310:	460a      	mov	r2, r1
 8002312:	62ba      	str	r2, [r7, #40]	; 0x28
 8002314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002316:	4413      	add	r3, r2
 8002318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800231a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800231c:	2200      	movs	r2, #0
 800231e:	61bb      	str	r3, [r7, #24]
 8002320:	61fa      	str	r2, [r7, #28]
 8002322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002326:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800232a:	f7fd ff4d 	bl	80001c8 <__aeabi_uldivmod>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4613      	mov	r3, r2
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002336:	e053      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002338:	4b35      	ldr	r3, [pc, #212]	; (8002410 <HAL_RCC_GetSysClockFreq+0x180>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	099b      	lsrs	r3, r3, #6
 800233e:	2200      	movs	r2, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	617a      	str	r2, [r7, #20]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800234a:	f04f 0b00 	mov.w	fp, #0
 800234e:	4652      	mov	r2, sl
 8002350:	465b      	mov	r3, fp
 8002352:	f04f 0000 	mov.w	r0, #0
 8002356:	f04f 0100 	mov.w	r1, #0
 800235a:	0159      	lsls	r1, r3, #5
 800235c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002360:	0150      	lsls	r0, r2, #5
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	ebb2 080a 	subs.w	r8, r2, sl
 800236a:	eb63 090b 	sbc.w	r9, r3, fp
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800237a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800237e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002382:	ebb2 0408 	subs.w	r4, r2, r8
 8002386:	eb63 0509 	sbc.w	r5, r3, r9
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	00eb      	lsls	r3, r5, #3
 8002394:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002398:	00e2      	lsls	r2, r4, #3
 800239a:	4614      	mov	r4, r2
 800239c:	461d      	mov	r5, r3
 800239e:	eb14 030a 	adds.w	r3, r4, sl
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	eb45 030b 	adc.w	r3, r5, fp
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023b6:	4629      	mov	r1, r5
 80023b8:	028b      	lsls	r3, r1, #10
 80023ba:	4621      	mov	r1, r4
 80023bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c0:	4621      	mov	r1, r4
 80023c2:	028a      	lsls	r2, r1, #10
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ca:	2200      	movs	r2, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	60fa      	str	r2, [r7, #12]
 80023d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d4:	f7fd fef8 	bl	80001c8 <__aeabi_uldivmod>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4613      	mov	r3, r2
 80023de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_GetSysClockFreq+0x180>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c1b      	lsrs	r3, r3, #16
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80023f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023fa:	e002      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetSysClockFreq+0x184>)
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002404:	4618      	mov	r0, r3
 8002406:	3740      	adds	r7, #64	; 0x40
 8002408:	46bd      	mov	sp, r7
 800240a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	00f42400 	.word	0x00f42400
 8002418:	017d7840 	.word	0x017d7840

0800241c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fe fb13 	bl	8000a6c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2203      	movs	r2, #3
 800244a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f814 	bl	800247c <HAL_SD_InitCard>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e00a      	b.n	8002474 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800247c:	b5b0      	push	{r4, r5, r7, lr}
 800247e:	b08e      	sub	sp, #56	; 0x38
 8002480:	af04      	add	r7, sp, #16
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800248c:	2300      	movs	r3, #0
 800248e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002498:	2376      	movs	r3, #118	; 0x76
 800249a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681d      	ldr	r5, [r3, #0]
 80024a0:	466c      	mov	r4, sp
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80024ae:	f107 0308 	add.w	r3, r7, #8
 80024b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b4:	4628      	mov	r0, r5
 80024b6:	f001 f8d7 	bl	8003668 <SDIO_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80024c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e04f      	b.n	800256c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80024cc:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_SD_InitCard+0xf8>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 f8f1 	bl	80036be <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <HAL_SD_InitCard+0xf8>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80024e2:	2002      	movs	r0, #2
 80024e4:	f7fe fd0e 	bl	8000f04 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 fd77 	bl	8002fdc <SD_PowerON>
 80024ee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e02e      	b.n	800256c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fc96 	bl	8002e40 <SD_InitCard>
 8002514:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e01b      	b.n	800256c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800253c:	4618      	mov	r0, r3
 800253e:	f001 f950 	bl	80037e2 <SDMMC_CmdBlockLength>
 8002542:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00f      	beq.n	800256a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_SD_InitCard+0xfc>)
 8002550:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bdb0      	pop	{r4, r5, r7, pc}
 8002574:	422580a0 	.word	0x422580a0
 8002578:	004005ff 	.word	0x004005ff

0800257c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	; 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d107      	bne.n	80025a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002598:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0c0      	b.n	8002726 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f040 80b9 	bne.w	8002724 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80025b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	441a      	add	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d907      	bls.n	80025d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e0a7      	b.n	8002726 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2203      	movs	r2, #3
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	4a4c      	ldr	r2, [pc, #304]	; (8002730 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8002600:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	4a4b      	ldr	r2, [pc, #300]	; (8002734 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002608:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2200      	movs	r2, #0
 8002610:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	3380      	adds	r3, #128	; 0x80
 8002640:	4619      	mov	r1, r3
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	025b      	lsls	r3, r3, #9
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	f7fe fe3f 	bl	80012cc <HAL_DMA_Start_IT>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d017      	beq.n	8002684 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002662:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a33      	ldr	r2, [pc, #204]	; (8002738 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e050      	b.n	8002726 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002686:	2201      	movs	r2, #1
 8002688:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	2b01      	cmp	r3, #1
 8002690:	d002      	beq.n	8002698 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	025b      	lsls	r3, r3, #9
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002698:	f04f 33ff 	mov.w	r3, #4294967295
 800269c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	025b      	lsls	r3, r3, #9
 80026a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80026a4:	2390      	movs	r3, #144	; 0x90
 80026a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f107 0210 	add.w	r2, r7, #16
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f001 f863 	bl	800378a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d90a      	bls.n	80026e0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2282      	movs	r2, #130	; 0x82
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 f8c7 	bl	800386a <SDMMC_CmdReadMultiBlock>
 80026dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80026de:	e009      	b.n	80026f4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2281      	movs	r2, #129	; 0x81
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 f89a 	bl	8003826 <SDMMC_CmdReadSingleBlock>
 80026f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d012      	beq.n	8002720 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	431a      	orrs	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e002      	b.n	8002726 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8002720:	2300      	movs	r3, #0
 8002722:	e000      	b.n	8002726 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8002724:	2302      	movs	r3, #2
  }
}
 8002726:	4618      	mov	r0, r3
 8002728:	3730      	adds	r7, #48	; 0x30
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	08002d2b 	.word	0x08002d2b
 8002734:	08002d9d 	.word	0x08002d9d
 8002738:	004005ff 	.word	0x004005ff
 800273c:	4225858c 	.word	0x4225858c

08002740 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08c      	sub	sp, #48	; 0x30
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0c5      	b.n	80028f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b01      	cmp	r3, #1
 8002772:	f040 80be 	bne.w	80028f2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800277c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	441a      	add	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	429a      	cmp	r2, r3
 8002788:	d907      	bls.n	800279a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0ac      	b.n	80028f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2203      	movs	r2, #3
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	4a4e      	ldr	r2, [pc, #312]	; (80028fc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	4a4d      	ldr	r2, [pc, #308]	; (8002900 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80027cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	2200      	movs	r2, #0
 80027d4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d002      	beq.n	80027e4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	025b      	lsls	r3, r3, #9
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d90a      	bls.n	8002800 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	22a0      	movs	r2, #160	; 0xa0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027f6:	4618      	mov	r0, r3
 80027f8:	f001 f87b 	bl	80038f2 <SDMMC_CmdWriteMultiBlock>
 80027fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80027fe:	e009      	b.n	8002814 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2290      	movs	r2, #144	; 0x90
 8002804:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800280c:	4618      	mov	r0, r3
 800280e:	f001 f84e 	bl	80038ae <SDMMC_CmdWriteSingleBlock>
 8002812:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d012      	beq.n	8002840 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a39      	ldr	r2, [pc, #228]	; (8002904 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002828:	431a      	orrs	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e059      	b.n	80028f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8002840:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3380      	adds	r3, #128	; 0x80
 8002876:	461a      	mov	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	025b      	lsls	r3, r3, #9
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	f7fe fd25 	bl	80012cc <HAL_DMA_Start_IT>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01c      	beq.n	80028c2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8002896:	f023 0302 	bic.w	r3, r3, #2
 800289a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a18      	ldr	r2, [pc, #96]	; (8002904 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e018      	b.n	80028f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	025b      	lsls	r3, r3, #9
 80028cc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80028ce:	2390      	movs	r3, #144	; 0x90
 80028d0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80028da:	2301      	movs	r3, #1
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f107 0210 	add.w	r2, r7, #16
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 ff4e 	bl	800378a <SDIO_ConfigData>

      return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
  }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3730      	adds	r7, #48	; 0x30
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	08002d01 	.word	0x08002d01
 8002900:	08002d9d 	.word	0x08002d9d
 8002904:	004005ff 	.word	0x004005ff
 8002908:	4225858c 	.word	0x4225858c

0800290c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800292e:	0f9b      	lsrs	r3, r3, #30
 8002930:	b2da      	uxtb	r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	b2db      	uxtb	r3, r3
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	b2da      	uxtb	r2, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800294c:	0e1b      	lsrs	r3, r3, #24
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	b2da      	uxtb	r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800295e:	0c1b      	lsrs	r3, r3, #16
 8002960:	b2da      	uxtb	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	b2da      	uxtb	r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002976:	b2da      	uxtb	r2, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002980:	0d1b      	lsrs	r3, r3, #20
 8002982:	b29a      	uxth	r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	b2da      	uxtb	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800299e:	0bdb      	lsrs	r3, r3, #15
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b0:	0b9b      	lsrs	r3, r3, #14
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c2:	0b5b      	lsrs	r3, r3, #13
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d4:	0b1b      	lsrs	r3, r3, #12
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2200      	movs	r2, #0
 80029e6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d163      	bne.n	8002ab8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029fa:	4013      	ands	r3, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002a00:	0f92      	lsrs	r2, r2, #30
 8002a02:	431a      	orrs	r2, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0c:	0edb      	lsrs	r3, r3, #27
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a1e:	0e1b      	lsrs	r3, r3, #24
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a30:	0d5b      	lsrs	r3, r3, #21
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a42:	0c9b      	lsrs	r3, r3, #18
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a54:	0bdb      	lsrs	r3, r3, #15
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	7e1b      	ldrb	r3, [r3, #24]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	3302      	adds	r3, #2
 8002a78:	2201      	movs	r2, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a82:	fb03 f202 	mul.w	r2, r3, r2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	7a1b      	ldrb	r3, [r3, #8]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	2201      	movs	r2, #1
 8002a96:	409a      	lsls	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002aa4:	0a52      	lsrs	r2, r2, #9
 8002aa6:	fb03 f202 	mul.w	r2, r3, r2
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab4:	661a      	str	r2, [r3, #96]	; 0x60
 8002ab6:	e031      	b.n	8002b1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d11d      	bne.n	8002afc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ace:	0c1b      	lsrs	r3, r3, #16
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	3301      	adds	r3, #1
 8002adc:	029a      	lsls	r2, r3, #10
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	661a      	str	r2, [r3, #96]	; 0x60
 8002afa:	e00f      	b.n	8002b1c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a58      	ldr	r2, [pc, #352]	; (8002c64 <HAL_SD_GetCardCSD+0x344>)
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e09d      	b.n	8002c58 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b20:	0b9b      	lsrs	r3, r3, #14
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b32:	09db      	lsrs	r3, r3, #7
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	0fdb      	lsrs	r3, r3, #31
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	0f5b      	lsrs	r3, r3, #29
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	0e9b      	lsrs	r3, r3, #26
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b84:	0d9b      	lsrs	r3, r3, #22
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	0d5b      	lsrs	r3, r3, #21
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	0bdb      	lsrs	r3, r3, #15
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bda:	0b9b      	lsrs	r3, r3, #14
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	0b5b      	lsrs	r3, r3, #13
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	0b1b      	lsrs	r3, r3, #12
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	0a9b      	lsrs	r3, r3, #10
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	085b      	lsrs	r3, r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	004005ff 	.word	0x004005ff

08002c68 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fa10 	bl	80030f8 <SD_SendStatus>
 8002cd8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	0a5b      	lsrs	r3, r3, #9
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002cf6:	693b      	ldr	r3, [r7, #16]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	2b82      	cmp	r3, #130	; 0x82
 8002d3e:	d111      	bne.n	8002d64 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fdf7 	bl	8003938 <SDMMC_CmdStopTransfer>
 8002d4a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f7ff fdd4 	bl	800290c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0208 	bic.w	r2, r2, #8
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f240 523a 	movw	r2, #1338	; 0x53a
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f001 fa03 	bl	8004198 <HAL_SD_RxCpltCallback>
#endif
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7fe fc70 	bl	8001690 <HAL_DMA_GetError>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d03e      	beq.n	8002e34 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d002      	beq.n	8002dd2 <SD_DMAError+0x36>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d12d      	bne.n	8002e2e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <SD_DMAError+0xa0>)
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8002de8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8002df6:	6978      	ldr	r0, [r7, #20]
 8002df8:	f7ff ff62 	bl	8002cc0 <HAL_SD_GetCardState>
 8002dfc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b06      	cmp	r3, #6
 8002e02:	d002      	beq.n	8002e0a <SD_DMAError+0x6e>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d10a      	bne.n	8002e20 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fd92 	bl	8003938 <SDMMC_CmdStopTransfer>
 8002e14:	4602      	mov	r2, r0
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff fd6c 	bl	800290c <HAL_SD_ErrorCallback>
#endif
  }
}
 8002e34:	bf00      	nop
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	004005ff 	.word	0x004005ff

08002e40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e40:	b5b0      	push	{r4, r5, r7, lr}
 8002e42:	b094      	sub	sp, #80	; 0x50
 8002e44:	af04      	add	r7, sp, #16
 8002e46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 fc42 	bl	80036da <SDIO_GetPowerState>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002e5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e60:	e0b8      	b.n	8002fd4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d02f      	beq.n	8002eca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fe29 	bl	8003ac6 <SDMMC_CmdSendCID>
 8002e74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <SD_InitCard+0x40>
    {
      return errorstate;
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e7e:	e0a9      	b.n	8002fd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fc6c 	bl	8003764 <SDIO_GetResponse>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2104      	movs	r1, #4
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fc63 	bl	8003764 <SDIO_GetResponse>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2108      	movs	r1, #8
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fc5a 	bl	8003764 <SDIO_GetResponse>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	210c      	movs	r1, #12
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fc51 	bl	8003764 <SDIO_GetResponse>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d00d      	beq.n	8002eee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f107 020e 	add.w	r2, r7, #14
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fe2f 	bl	8003b40 <SDMMC_CmdSetRelAdd>
 8002ee2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <SD_InitCard+0xae>
    {
      return errorstate;
 8002eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eec:	e072      	b.n	8002fd4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d036      	beq.n	8002f64 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f06:	041b      	lsls	r3, r3, #16
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f000 fdf9 	bl	8003b02 <SDMMC_CmdSendCSD>
 8002f10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <SD_InitCard+0xdc>
    {
      return errorstate;
 8002f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1a:	e05b      	b.n	8002fd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fc1e 	bl	8003764 <SDIO_GetResponse>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2104      	movs	r1, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fc15 	bl	8003764 <SDIO_GetResponse>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2108      	movs	r1, #8
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fc0c 	bl	8003764 <SDIO_GetResponse>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	210c      	movs	r1, #12
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fc03 	bl	8003764 <SDIO_GetResponse>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2104      	movs	r1, #4
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fbfa 	bl	8003764 <SDIO_GetResponse>
 8002f70:	4603      	mov	r3, r0
 8002f72:	0d1a      	lsrs	r2, r3, #20
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002f78:	f107 0310 	add.w	r3, r7, #16
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7ff fcce 	bl	8002920 <HAL_SD_GetCardCSD>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f8e:	e021      	b.n	8002fd4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f98:	041b      	lsls	r3, r3, #16
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	461c      	mov	r4, r3
 8002f9e:	4615      	mov	r5, r2
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	462b      	mov	r3, r5
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	f000 fce9 	bl	800397c <SDMMC_CmdSelDesel>
 8002faa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <SD_InitCard+0x176>
  {
    return errorstate;
 8002fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb4:	e00e      	b.n	8002fd4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681d      	ldr	r5, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	466c      	mov	r4, sp
 8002fbe:	f103 0210 	add.w	r2, r3, #16
 8002fc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002fc8:	3304      	adds	r3, #4
 8002fca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f000 fb4b 	bl	8003668 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3740      	adds	r7, #64	; 0x40
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bdb0      	pop	{r4, r5, r7, pc}

08002fdc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fce4 	bl	80039c2 <SDMMC_CmdGoIdleState>
 8002ffa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	e072      	b.n	80030ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 fcf7 	bl	80039fe <SDMMC_CmdOperCond>
 8003010:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fccd 	bl	80039c2 <SDMMC_CmdGoIdleState>
 8003028:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	e05b      	b.n	80030ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303e:	2b01      	cmp	r3, #1
 8003040:	d137      	bne.n	80030b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fcf7 	bl	8003a3c <SDMMC_CmdAppCommand>
 800304e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d02d      	beq.n	80030b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003056:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800305a:	e047      	b.n	80030ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fcea 	bl	8003a3c <SDMMC_CmdAppCommand>
 8003068:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <SD_PowerON+0x98>
    {
      return errorstate;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	e03b      	b.n	80030ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	491e      	ldr	r1, [pc, #120]	; (80030f4 <SD_PowerON+0x118>)
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fd00 	bl	8003a80 <SDMMC_CmdAppOperCommand>
 8003080:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003088:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800308c:	e02e      	b.n	80030ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fb65 	bl	8003764 <SDIO_GetResponse>
 800309a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	0fdb      	lsrs	r3, r3, #31
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <SD_PowerON+0xcc>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <SD_PowerON+0xce>
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]

    count++;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d802      	bhi.n	80030c2 <SD_PowerON+0xe6>
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0cc      	beq.n	800305c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d902      	bls.n	80030d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80030cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d0:	e00c      	b.n	80030ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44
 80030e2:	e002      	b.n	80030ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	c1100000 	.word	0xc1100000

080030f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d102      	bne.n	800310e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003108:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800310c:	e018      	b.n	8003140 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003116:	041b      	lsls	r3, r3, #16
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f000 fd31 	bl	8003b82 <SDMMC_CmdSendStatus>
 8003120:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	e009      	b.n	8003140 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fb16 	bl	8003764 <SDIO_GetResponse>
 8003138:	4602      	mov	r2, r0
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e07b      	b.n	8003252 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316a:	d009      	beq.n	8003180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	61da      	str	r2, [r3, #28]
 8003172:	e005      	b.n	8003180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fd fd5e 	bl	8000c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	ea42 0103 	orr.w	r1, r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	0c1b      	lsrs	r3, r3, #16
 800321e:	f003 0104 	and.w	r1, r3, #4
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	f003 0210 	and.w	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003240:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b088      	sub	sp, #32
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	603b      	str	r3, [r7, #0]
 8003266:	4613      	mov	r3, r2
 8003268:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_SPI_Transmit+0x22>
 8003278:	2302      	movs	r3, #2
 800327a:	e126      	b.n	80034ca <HAL_SPI_Transmit+0x270>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003284:	f7fd fe32 	bl	8000eec <HAL_GetTick>
 8003288:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d002      	beq.n	80032a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800329a:	2302      	movs	r3, #2
 800329c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800329e:	e10b      	b.n	80034b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_SPI_Transmit+0x52>
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032b0:	e102      	b.n	80034b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2203      	movs	r2, #3
 80032b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f8:	d10f      	bne.n	800331a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003308:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003318:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d007      	beq.n	8003338 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003340:	d14b      	bne.n	80033da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_Transmit+0xf6>
 800334a:	8afb      	ldrh	r3, [r7, #22]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d13e      	bne.n	80033ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	881a      	ldrh	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003374:	e02b      	b.n	80033ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d112      	bne.n	80033aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	881a      	ldrh	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80033a8:	e011      	b.n	80033ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033aa:	f7fd fd9f 	bl	8000eec <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d803      	bhi.n	80033c2 <HAL_SPI_Transmit+0x168>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d102      	bne.n	80033c8 <HAL_SPI_Transmit+0x16e>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033cc:	e074      	b.n	80034b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ce      	bne.n	8003376 <HAL_SPI_Transmit+0x11c>
 80033d8:	e04c      	b.n	8003474 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Transmit+0x18e>
 80033e2:	8afb      	ldrh	r3, [r7, #22]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d140      	bne.n	800346a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	330c      	adds	r3, #12
 80033f2:	7812      	ldrb	r2, [r2, #0]
 80033f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	1c5a      	adds	r2, r3, #1
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800340e:	e02c      	b.n	800346a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d113      	bne.n	8003446 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	86da      	strh	r2, [r3, #54]	; 0x36
 8003444:	e011      	b.n	800346a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003446:	f7fd fd51 	bl	8000eec <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d803      	bhi.n	800345e <HAL_SPI_Transmit+0x204>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d102      	bne.n	8003464 <HAL_SPI_Transmit+0x20a>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003468:	e026      	b.n	80034b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1cd      	bne.n	8003410 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 f8b3 	bl	80035e4 <SPI_EndRxTxTransaction>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	613b      	str	r3, [r7, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e000      	b.n	80034b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80034b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80034c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034e4:	f7fd fd02 	bl	8000eec <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034f4:	f7fd fcfa 	bl	8000eec <HAL_GetTick>
 80034f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034fa:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	015b      	lsls	r3, r3, #5
 8003500:	0d1b      	lsrs	r3, r3, #20
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800350a:	e054      	b.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d050      	beq.n	80035b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003514:	f7fd fcea 	bl	8000eec <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	69fa      	ldr	r2, [r7, #28]
 8003520:	429a      	cmp	r2, r3
 8003522:	d902      	bls.n	800352a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d13d      	bne.n	80035a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003542:	d111      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354c:	d004      	beq.n	8003558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003556:	d107      	bne.n	8003568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003570:	d10f      	bne.n	8003592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e017      	b.n	80035d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d19b      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20000000 	.word	0x20000000

080035e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <SPI_EndRxTxTransaction+0x7c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <SPI_EndRxTxTransaction+0x80>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	0d5b      	lsrs	r3, r3, #21
 80035fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003600:	fb02 f303 	mul.w	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360e:	d112      	bne.n	8003636 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2200      	movs	r2, #0
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff ff5a 	bl	80034d4 <SPI_WaitFlagStateUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362a:	f043 0220 	orr.w	r2, r3, #32
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00f      	b.n	8003656 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	3b01      	subs	r3, #1
 8003640:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d0f2      	beq.n	8003636 <SPI_EndRxTxTransaction+0x52>
 8003650:	e000      	b.n	8003654 <SPI_EndRxTxTransaction+0x70>
        break;
 8003652:	bf00      	nop
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000000 	.word	0x20000000
 8003664:	165e9f81 	.word	0x165e9f81

08003668 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8003668:	b084      	sub	sp, #16
 800366a:	b480      	push	{r7}
 800366c:	b085      	sub	sp, #20
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
 8003672:	f107 001c 	add.w	r0, r7, #28
 8003676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800367e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8003680:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8003682:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8003686:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800368a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800368e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8003690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8003692:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80036a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	431a      	orrs	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	b004      	add	sp, #16
 80036bc:	4770      	bx	lr

080036be <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2203      	movs	r2, #3
 80036ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0303 	and.w	r3, r3, #3
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003714:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800371a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8003720:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003730:	f023 030f 	bic.w	r3, r3, #15
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	b2db      	uxtb	r3, r3
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3314      	adds	r3, #20
 8003772:	461a      	mov	r2, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	4413      	add	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
}  
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037b0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80037b6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80037bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0

}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b088      	sub	sp, #32
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80037f0:	2310      	movs	r3, #16
 80037f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80037f4:	2340      	movs	r3, #64	; 0x40
 80037f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80037fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003800:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003802:	f107 0308 	add.w	r3, r7, #8
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff ff74 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	2110      	movs	r1, #16
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f9d7 	bl	8003bc8 <SDMMC_GetCmdResp1>
 800381a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800381c:	69fb      	ldr	r3, [r7, #28]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b088      	sub	sp, #32
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8003834:	2311      	movs	r3, #17
 8003836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003838:	2340      	movs	r3, #64	; 0x40
 800383a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003844:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003846:	f107 0308 	add.w	r3, r7, #8
 800384a:	4619      	mov	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff52 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	2111      	movs	r1, #17
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f9b5 	bl	8003bc8 <SDMMC_GetCmdResp1>
 800385e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003860:	69fb      	ldr	r3, [r7, #28]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b088      	sub	sp, #32
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003878:	2312      	movs	r3, #18
 800387a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800387c:	2340      	movs	r3, #64	; 0x40
 800387e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003888:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	4619      	mov	r1, r3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff30 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	2112      	movs	r1, #18
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f993 	bl	8003bc8 <SDMMC_GetCmdResp1>
 80038a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038a4:	69fb      	ldr	r3, [r7, #28]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3720      	adds	r7, #32
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b088      	sub	sp, #32
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80038bc:	2318      	movs	r3, #24
 80038be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80038c0:	2340      	movs	r3, #64	; 0x40
 80038c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80038c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	4619      	mov	r1, r3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff0e 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	2118      	movs	r1, #24
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f971 	bl	8003bc8 <SDMMC_GetCmdResp1>
 80038e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80038e8:	69fb      	ldr	r3, [r7, #28]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b088      	sub	sp, #32
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003900:	2319      	movs	r3, #25
 8003902:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003904:	2340      	movs	r3, #64	; 0x40
 8003906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800390c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003910:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003912:	f107 0308 	add.w	r3, r7, #8
 8003916:	4619      	mov	r1, r3
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff feec 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	2119      	movs	r1, #25
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f94f 	bl	8003bc8 <SDMMC_GetCmdResp1>
 800392a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800392c:	69fb      	ldr	r3, [r7, #28]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3720      	adds	r7, #32
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003944:	230c      	movs	r3, #12
 8003946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003948:	2340      	movs	r3, #64	; 0x40
 800394a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003954:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	4619      	mov	r1, r3
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff feca 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8003962:	4a05      	ldr	r2, [pc, #20]	; (8003978 <SDMMC_CmdStopTransfer+0x40>)
 8003964:	210c      	movs	r1, #12
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f92e 	bl	8003bc8 <SDMMC_GetCmdResp1>
 800396c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800396e:	69fb      	ldr	r3, [r7, #28]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	05f5e100 	.word	0x05f5e100

0800397c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800398c:	2307      	movs	r3, #7
 800398e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003990:	2340      	movs	r3, #64	; 0x40
 8003992:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800399c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800399e:	f107 0310 	add.w	r3, r7, #16
 80039a2:	4619      	mov	r1, r3
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff fea6 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80039aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ae:	2107      	movs	r1, #7
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f909 	bl	8003bc8 <SDMMC_GetCmdResp1>
 80039b6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3728      	adds	r7, #40	; 0x28
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b088      	sub	sp, #32
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80039da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80039e0:	f107 0308 	add.w	r3, r7, #8
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff fe85 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fb23 	bl	8004038 <SDMMC_GetCmdError>
 80039f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80039f4:	69fb      	ldr	r3, [r7, #28]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b088      	sub	sp, #32
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003a06:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003a0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a10:	2340      	movs	r3, #64	; 0x40
 8003a12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a1e:	f107 0308 	add.w	r3, r7, #8
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fe66 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fab6 	bl	8003f9c <SDMMC_GetCmdResp7>
 8003a30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a32:	69fb      	ldr	r3, [r7, #28]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b088      	sub	sp, #32
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8003a4a:	2337      	movs	r3, #55	; 0x37
 8003a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a4e:	2340      	movs	r3, #64	; 0x40
 8003a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003a5c:	f107 0308 	add.w	r3, r7, #8
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff fe47 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6c:	2137      	movs	r1, #55	; 0x37
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8aa 	bl	8003bc8 <SDMMC_GetCmdResp1>
 8003a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003a76:	69fb      	ldr	r3, [r7, #28]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003a96:	2329      	movs	r3, #41	; 0x29
 8003a98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003aa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	4619      	mov	r1, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff fe21 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f9bd 	bl	8003e34 <SDMMC_GetCmdResp3>
 8003aba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003abc:	69fb      	ldr	r3, [r7, #28]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b088      	sub	sp, #32
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003ad6:	23c0      	movs	r3, #192	; 0xc0
 8003ad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ae4:	f107 0308 	add.w	r3, r7, #8
 8003ae8:	4619      	mov	r1, r3
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fe03 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f957 	bl	8003da4 <SDMMC_GetCmdResp2>
 8003af6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003af8:	69fb      	ldr	r3, [r7, #28]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3720      	adds	r7, #32
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b088      	sub	sp, #32
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003b10:	2309      	movs	r3, #9
 8003b12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003b14:	23c0      	movs	r3, #192	; 0xc0
 8003b16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff fde4 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f938 	bl	8003da4 <SDMMC_GetCmdResp2>
 8003b34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b36:	69fb      	ldr	r3, [r7, #28]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b52:	2340      	movs	r3, #64	; 0x40
 8003b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003b60:	f107 0308 	add.w	r3, r7, #8
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7ff fdc5 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	2103      	movs	r1, #3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f99d 	bl	8003eb0 <SDMMC_GetCmdResp6>
 8003b76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003b78:	69fb      	ldr	r3, [r7, #28]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b088      	sub	sp, #32
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8003b90:	230d      	movs	r3, #13
 8003b92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003b94:	2340      	movs	r3, #64	; 0x40
 8003b96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ba0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff fda4 	bl	80036f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	210d      	movs	r1, #13
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f807 	bl	8003bc8 <SDMMC_GetCmdResp1>
 8003bba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003bd6:	4b70      	ldr	r3, [pc, #448]	; (8003d98 <SDMMC_GetCmdResp1+0x1d0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a70      	ldr	r2, [pc, #448]	; (8003d9c <SDMMC_GetCmdResp1+0x1d4>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	0a5a      	lsrs	r2, r3, #9
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	1e5a      	subs	r2, r3, #1
 8003bee:	61fa      	str	r2, [r7, #28]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bf8:	e0c9      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bfe:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0ef      	beq.n	8003bea <SDMMC_GetCmdResp1+0x22>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1ea      	bne.n	8003bea <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2204      	movs	r2, #4
 8003c24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003c26:	2304      	movs	r3, #4
 8003c28:	e0b1      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0a6      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	22c5      	movs	r2, #197	; 0xc5
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f7ff fd7f 	bl	800374a <SDIO_GetCommandResponse>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461a      	mov	r2, r3
 8003c50:	7afb      	ldrb	r3, [r7, #11]
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d001      	beq.n	8003c5a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e099      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff fd81 	bl	8003764 <SDIO_GetResponse>
 8003c62:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <SDMMC_GetCmdResp1+0x1d8>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e08d      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	da02      	bge.n	8003c7e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003c78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c7c:	e087      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003c88:	2340      	movs	r3, #64	; 0x40
 8003c8a:	e080      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	e079      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ca8:	e071      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cb8:	e069      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc8:	e061      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003cd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003cd8:	e059      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce8:	e051      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cf8:	e049      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003d04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d08:	e041      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d002      	beq.n	8003d1a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8003d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d18:	e039      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8003d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d28:	e031      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8003d34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d38:	e029      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8003d44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003d48:	e021      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8003d54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003d58:	e019      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8003d64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d68:	e011      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d002      	beq.n	8003d7a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003d74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d78:	e009      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003d84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003d88:	e001      	b.n	8003d8e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	10624dd3 	.word	0x10624dd3
 8003da0:	fdffe008 	.word	0xfdffe008

08003da4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003dac:	4b1f      	ldr	r3, [pc, #124]	; (8003e2c <SDMMC_GetCmdResp2+0x88>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <SDMMC_GetCmdResp2+0x8c>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0a5b      	lsrs	r3, r3, #9
 8003db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1e5a      	subs	r2, r3, #1
 8003dc6:	60fa      	str	r2, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d102      	bne.n	8003dd2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003dd0:	e026      	b.n	8003e20 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ef      	beq.n	8003dc2 <SDMMC_GetCmdResp2+0x1e>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ea      	bne.n	8003dc2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2204      	movs	r2, #4
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003dfe:	2304      	movs	r3, #4
 8003e00:	e00e      	b.n	8003e20 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e003      	b.n	8003e20 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	22c5      	movs	r2, #197	; 0xc5
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	10624dd3 	.word	0x10624dd3

08003e34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <SDMMC_GetCmdResp3+0x74>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1a      	ldr	r2, [pc, #104]	; (8003eac <SDMMC_GetCmdResp3+0x78>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	0a5b      	lsrs	r3, r3, #9
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	fb02 f303 	mul.w	r3, r2, r3
 8003e50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	60fa      	str	r2, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d102      	bne.n	8003e62 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003e5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003e60:	e01b      	b.n	8003e9a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ef      	beq.n	8003e52 <SDMMC_GetCmdResp3+0x1e>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1ea      	bne.n	8003e52 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e003      	b.n	8003e9a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	22c5      	movs	r2, #197	; 0xc5
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	20000000 	.word	0x20000000
 8003eac:	10624dd3 	.word	0x10624dd3

08003eb0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003ebe:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <SDMMC_GetCmdResp6+0xe4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a35      	ldr	r2, [pc, #212]	; (8003f98 <SDMMC_GetCmdResp6+0xe8>)
 8003ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec8:	0a5b      	lsrs	r3, r3, #9
 8003eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	1e5a      	subs	r2, r3, #1
 8003ed8:	61fa      	str	r2, [r7, #28]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d102      	bne.n	8003ee4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003ede:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ee2:	e052      	b.n	8003f8a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ef      	beq.n	8003ed4 <SDMMC_GetCmdResp6+0x24>
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ea      	bne.n	8003ed4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d004      	beq.n	8003f14 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2204      	movs	r2, #4
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003f10:	2304      	movs	r3, #4
 8003f12:	e03a      	b.n	8003f8a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e02f      	b.n	8003f8a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff fc0d 	bl	800374a <SDIO_GetCommandResponse>
 8003f30:	4603      	mov	r3, r0
 8003f32:	461a      	mov	r2, r3
 8003f34:	7afb      	ldrb	r3, [r7, #11]
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d001      	beq.n	8003f3e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e025      	b.n	8003f8a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	22c5      	movs	r2, #197	; 0xc5
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8003f44:	2100      	movs	r1, #0
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff fc0c 	bl	8003764 <SDIO_GetResponse>
 8003f4c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	0c1b      	lsrs	r3, r3, #16
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e011      	b.n	8003f8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f74:	e009      	b.n	8003f8a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f84:	e001      	b.n	8003f8a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000000 	.word	0x20000000
 8003f98:	10624dd3 	.word	0x10624dd3

08003f9c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <SDMMC_GetCmdResp7+0x94>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a22      	ldr	r2, [pc, #136]	; (8004034 <SDMMC_GetCmdResp7+0x98>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	0a5b      	lsrs	r3, r3, #9
 8003fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb4:	fb02 f303 	mul.w	r3, r2, r3
 8003fb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1e5a      	subs	r2, r3, #1
 8003fbe:	60fa      	str	r2, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d102      	bne.n	8003fca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003fc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003fc8:	e02c      	b.n	8004024 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ef      	beq.n	8003fba <SDMMC_GetCmdResp7+0x1e>
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1ea      	bne.n	8003fba <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	f003 0304 	and.w	r3, r3, #4
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e014      	b.n	8004024 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800400c:	2301      	movs	r3, #1
 800400e:	e009      	b.n	8004024 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2240      	movs	r2, #64	; 0x40
 8004020:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004022:	2300      	movs	r3, #0
  
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	20000000 	.word	0x20000000
 8004034:	10624dd3 	.word	0x10624dd3

08004038 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <SDMMC_GetCmdError+0x50>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a11      	ldr	r2, [pc, #68]	; (800408c <SDMMC_GetCmdError+0x54>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0a5b      	lsrs	r3, r3, #9
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e5a      	subs	r2, r3, #1
 800405a:	60fa      	str	r2, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004064:	e009      	b.n	800407a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0f1      	beq.n	8004056 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	22c5      	movs	r2, #197	; 0xc5
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000000 	.word	0x20000000
 800408c:	10624dd3 	.word	0x10624dd3

08004090 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004094:	4904      	ldr	r1, [pc, #16]	; (80040a8 <MX_FATFS_Init+0x18>)
 8004096:	4805      	ldr	r0, [pc, #20]	; (80040ac <MX_FATFS_Init+0x1c>)
 8004098:	f002 fff0 	bl	800707c <FATFS_LinkDriver>
 800409c:	4603      	mov	r3, r0
 800409e:	461a      	mov	r2, r3
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <MX_FATFS_Init+0x20>)
 80040a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80040a4:	bf00      	nop
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200001dc 	.word	0x200001dc
 80040ac:	08007308 	.word	0x08007308
 80040b0:	200001d8 	.word	0x200001d8

080040b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80040b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80040ce:	f000 f86d 	bl	80041ac <BSP_SD_IsDetected>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d001      	beq.n	80040dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e005      	b.n	80040e8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80040dc:	4804      	ldr	r0, [pc, #16]	; (80040f0 <BSP_SD_Init+0x2c>)
 80040de:	f7fe f99d 	bl	800241c <HAL_SD_Init>
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80040e6:	79fb      	ldrb	r3, [r7, #7]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000038 	.word	0x20000038

080040f4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	68f9      	ldr	r1, [r7, #12]
 800410a:	4806      	ldr	r0, [pc, #24]	; (8004124 <BSP_SD_ReadBlocks_DMA+0x30>)
 800410c:	f7fe fa36 	bl	800257c <HAL_SD_ReadBlocks_DMA>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800411a:	7dfb      	ldrb	r3, [r7, #23]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3718      	adds	r7, #24
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	20000038 	.word	0x20000038

08004128 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	4806      	ldr	r0, [pc, #24]	; (8004158 <BSP_SD_WriteBlocks_DMA+0x30>)
 8004140:	f7fe fafe 	bl	8002740 <HAL_SD_WriteBlocks_DMA>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800414e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20000038 	.word	0x20000038

0800415c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004160:	4805      	ldr	r0, [pc, #20]	; (8004178 <BSP_SD_GetCardState+0x1c>)
 8004162:	f7fe fdad 	bl	8002cc0 <HAL_SD_GetCardState>
 8004166:	4603      	mov	r3, r0
 8004168:	2b04      	cmp	r3, #4
 800416a:	bf14      	ite	ne
 800416c:	2301      	movne	r3, #1
 800416e:	2300      	moveq	r3, #0
 8004170:	b2db      	uxtb	r3, r3
}
 8004172:	4618      	mov	r0, r3
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000038 	.word	0x20000038

0800417c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4803      	ldr	r0, [pc, #12]	; (8004194 <BSP_SD_GetCardInfo+0x18>)
 8004188:	f7fe fd6e 	bl	8002c68 <HAL_SD_GetCardInfo>
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000038 	.word	0x20000038

08004198 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b082      	sub	sp, #8
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80041a0:	f000 f97a 	bl	8004498 <BSP_SD_ReadCpltCallback>
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80041b2:	2301      	movs	r3, #1
 80041b4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	b2db      	uxtb	r3, r3
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80041ce:	f7fc fe8d 	bl	8000eec <HAL_GetTick>
 80041d2:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80041d4:	e006      	b.n	80041e4 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80041d6:	f7ff ffc1 	bl	800415c <BSP_SD_GetCardState>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	e009      	b.n	80041f8 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80041e4:	f7fc fe82 	bl	8000eec <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d8f0      	bhi.n	80041d6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <SD_CheckStatus+0x38>)
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004210:	f7ff ffa4 	bl	800415c <BSP_SD_GetCardState>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <SD_CheckStatus+0x38>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f023 0301 	bic.w	r3, r3, #1
 8004224:	b2da      	uxtb	r2, r3
 8004226:	4b04      	ldr	r3, [pc, #16]	; (8004238 <SD_CheckStatus+0x38>)
 8004228:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800422a:	4b03      	ldr	r3, [pc, #12]	; (8004238 <SD_CheckStatus+0x38>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000009 	.word	0x20000009

0800423c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004246:	f7ff ff3d 	bl	80040c4 <BSP_SD_Init>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff ffd4 	bl	8004200 <SD_CheckStatus>
 8004258:	4603      	mov	r3, r0
 800425a:	461a      	mov	r2, r3
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <SD_initialize+0x34>)
 800425e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <SD_initialize+0x34>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000009 	.word	0x20000009

08004274 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff ffbd 	bl	8004200 <SD_CheckStatus>
 8004286:	4603      	mov	r3, r0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
 800429a:	603b      	str	r3, [r7, #0]
 800429c:	4603      	mov	r3, r0
 800429e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80042a4:	f247 5030 	movw	r0, #30000	; 0x7530
 80042a8:	f7ff ff8d 	bl	80041c6 <SD_CheckStatusWithTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	da01      	bge.n	80042b6 <SD_read+0x26>
  {
    return res;
 80042b2:	7dfb      	ldrb	r3, [r7, #23]
 80042b4:	e03b      	b.n	800432e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	68b8      	ldr	r0, [r7, #8]
 80042bc:	f7ff ff1a 	bl	80040f4 <BSP_SD_ReadBlocks_DMA>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d132      	bne.n	800432c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80042c6:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <SD_read+0xa8>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80042cc:	f7fc fe0e 	bl	8000eec <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80042d2:	bf00      	nop
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <SD_read+0xa8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d108      	bne.n	80042ee <SD_read+0x5e>
 80042dc:	f7fc fe06 	bl	8000eec <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f247 522f 	movw	r2, #29999	; 0x752f
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d9f2      	bls.n	80042d4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80042ee:	4b12      	ldr	r3, [pc, #72]	; (8004338 <SD_read+0xa8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	75fb      	strb	r3, [r7, #23]
 80042fa:	e017      	b.n	800432c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80042fc:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <SD_read+0xa8>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8004302:	f7fc fdf3 	bl	8000eec <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8004308:	e007      	b.n	800431a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800430a:	f7ff ff27 	bl	800415c <BSP_SD_GetCardState>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <SD_read+0x8a>
          {
            res = RES_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8004318:	e008      	b.n	800432c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800431a:	f7fc fde7 	bl	8000eec <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f247 522f 	movw	r2, #29999	; 0x752f
 8004328:	4293      	cmp	r3, r2
 800432a:	d9ee      	bls.n	800430a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800432c:	7dfb      	ldrb	r3, [r7, #23]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3718      	adds	r7, #24
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	200001e4 	.word	0x200001e4

0800433c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8004350:	4b24      	ldr	r3, [pc, #144]	; (80043e4 <SD_write+0xa8>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8004356:	f247 5030 	movw	r0, #30000	; 0x7530
 800435a:	f7ff ff34 	bl	80041c6 <SD_CheckStatusWithTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	da01      	bge.n	8004368 <SD_write+0x2c>
  {
    return res;
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	e038      	b.n	80043da <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	68b8      	ldr	r0, [r7, #8]
 800436e:	f7ff fedb 	bl	8004128 <BSP_SD_WriteBlocks_DMA>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d12f      	bne.n	80043d8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8004378:	f7fc fdb8 	bl	8000eec <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800437e:	bf00      	nop
 8004380:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <SD_write+0xa8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d108      	bne.n	800439a <SD_write+0x5e>
 8004388:	f7fc fdb0 	bl	8000eec <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f247 522f 	movw	r2, #29999	; 0x752f
 8004396:	4293      	cmp	r3, r2
 8004398:	d9f2      	bls.n	8004380 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <SD_write+0xa8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d102      	bne.n	80043a8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	75fb      	strb	r3, [r7, #23]
 80043a6:	e017      	b.n	80043d8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <SD_write+0xa8>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80043ae:	f7fc fd9d 	bl	8000eec <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80043b4:	e007      	b.n	80043c6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80043b6:	f7ff fed1 	bl	800415c <BSP_SD_GetCardState>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <SD_write+0x8a>
          {
            res = RES_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	75fb      	strb	r3, [r7, #23]
            break;
 80043c4:	e008      	b.n	80043d8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80043c6:	f7fc fd91 	bl	8000eec <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f247 522f 	movw	r2, #29999	; 0x752f
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d9ee      	bls.n	80043b6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	200001e0 	.word	0x200001e0

080043e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08c      	sub	sp, #48	; 0x30
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	603a      	str	r2, [r7, #0]
 80043f2:	71fb      	strb	r3, [r7, #7]
 80043f4:	460b      	mov	r3, r1
 80043f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80043fe:	4b25      	ldr	r3, [pc, #148]	; (8004494 <SD_ioctl+0xac>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <SD_ioctl+0x28>
 800440c:	2303      	movs	r3, #3
 800440e:	e03c      	b.n	800448a <SD_ioctl+0xa2>

  switch (cmd)
 8004410:	79bb      	ldrb	r3, [r7, #6]
 8004412:	2b03      	cmp	r3, #3
 8004414:	d834      	bhi.n	8004480 <SD_ioctl+0x98>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <SD_ioctl+0x34>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	0800442d 	.word	0x0800442d
 8004420:	08004435 	.word	0x08004435
 8004424:	0800444d 	.word	0x0800444d
 8004428:	08004467 	.word	0x08004467
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800442c:	2300      	movs	r3, #0
 800442e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004432:	e028      	b.n	8004486 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fe9f 	bl	800417c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800444a:	e01c      	b.n	8004486 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800444c:	f107 030c 	add.w	r3, r7, #12
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fe93 	bl	800417c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	b29a      	uxth	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004464:	e00f      	b.n	8004486 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004466:	f107 030c 	add.w	r3, r7, #12
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff fe86 	bl	800417c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	0a5a      	lsrs	r2, r3, #9
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800447e:	e002      	b.n	8004486 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004480:	2304      	movs	r3, #4
 8004482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800448a:	4618      	mov	r0, r3
 800448c:	3730      	adds	r7, #48	; 0x30
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000009 	.word	0x20000009

08004498 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <BSP_SD_ReadCpltCallback+0x14>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	200001e4 	.word	0x200001e4

080044b0 <LCD_WriteCommand>:
 * @brief Write command to LCD controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t cmd)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
	LCD_Select();
 80044ba:	2200      	movs	r2, #0
 80044bc:	2180      	movs	r1, #128	; 0x80
 80044be:	480c      	ldr	r0, [pc, #48]	; (80044f0 <LCD_WriteCommand+0x40>)
 80044c0:	f7fd fb6e 	bl	8001ba0 <HAL_GPIO_WritePin>
	LCD_DC_Clr();
 80044c4:	2200      	movs	r2, #0
 80044c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044ca:	4809      	ldr	r0, [pc, #36]	; (80044f0 <LCD_WriteCommand+0x40>)
 80044cc:	f7fd fb68 	bl	8001ba0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80044d0:	1df9      	adds	r1, r7, #7
 80044d2:	f04f 33ff 	mov.w	r3, #4294967295
 80044d6:	2201      	movs	r2, #1
 80044d8:	4806      	ldr	r0, [pc, #24]	; (80044f4 <LCD_WriteCommand+0x44>)
 80044da:	f7fe febe 	bl	800325a <HAL_SPI_Transmit>
	LCD_UnSelect();
 80044de:	2201      	movs	r2, #1
 80044e0:	2180      	movs	r1, #128	; 0x80
 80044e2:	4803      	ldr	r0, [pc, #12]	; (80044f0 <LCD_WriteCommand+0x40>)
 80044e4:	f7fd fb5c 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40020400 	.word	0x40020400
 80044f4:	2000017c 	.word	0x2000017c

080044f8 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
	LCD_Select();
 8004502:	2200      	movs	r2, #0
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	4816      	ldr	r0, [pc, #88]	; (8004560 <LCD_WriteData+0x68>)
 8004508:	f7fd fb4a 	bl	8001ba0 <HAL_GPIO_WritePin>
	LCD_DC_Set();
 800450c:	2201      	movs	r2, #1
 800450e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004512:	4813      	ldr	r0, [pc, #76]	; (8004560 <LCD_WriteData+0x68>)
 8004514:	f7fd fb44 	bl	8001ba0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 8004518:	e015      	b.n	8004546 <LCD_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004520:	4293      	cmp	r3, r2
 8004522:	bf28      	it	cs
 8004524:	4613      	movcs	r3, r2
 8004526:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&LCD_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&LCD_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8004528:	89fa      	ldrh	r2, [r7, #14]
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	480c      	ldr	r0, [pc, #48]	; (8004564 <LCD_WriteData+0x6c>)
 8004532:	f7fe fe92 	bl	800325a <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 8004536:	89fb      	ldrh	r3, [r7, #14]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800453e:	89fb      	ldrh	r3, [r7, #14]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e6      	bne.n	800451a <LCD_WriteData+0x22>
	}

	LCD_UnSelect();
 800454c:	2201      	movs	r2, #1
 800454e:	2180      	movs	r1, #128	; 0x80
 8004550:	4803      	ldr	r0, [pc, #12]	; (8004560 <LCD_WriteData+0x68>)
 8004552:	f7fd fb25 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 8004556:	bf00      	nop
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40020400 	.word	0x40020400
 8004564:	2000017c 	.word	0x2000017c

08004568 <LCD_WriteSmallData>:
 * @brief Write data to LCD controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void LCD_WriteSmallData(uint8_t data)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	71fb      	strb	r3, [r7, #7]
	LCD_Select();
 8004572:	2200      	movs	r2, #0
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	480c      	ldr	r0, [pc, #48]	; (80045a8 <LCD_WriteSmallData+0x40>)
 8004578:	f7fd fb12 	bl	8001ba0 <HAL_GPIO_WritePin>
	LCD_DC_Set();
 800457c:	2201      	movs	r2, #1
 800457e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004582:	4809      	ldr	r0, [pc, #36]	; (80045a8 <LCD_WriteSmallData+0x40>)
 8004584:	f7fd fb0c 	bl	8001ba0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&LCD_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8004588:	1df9      	adds	r1, r7, #7
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	2201      	movs	r2, #1
 8004590:	4806      	ldr	r0, [pc, #24]	; (80045ac <LCD_WriteSmallData+0x44>)
 8004592:	f7fe fe62 	bl	800325a <HAL_SPI_Transmit>
	LCD_UnSelect();
 8004596:	2201      	movs	r2, #1
 8004598:	2180      	movs	r1, #128	; 0x80
 800459a:	4803      	ldr	r0, [pc, #12]	; (80045a8 <LCD_WriteSmallData+0x40>)
 800459c:	f7fd fb00 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40020400 	.word	0x40020400
 80045ac:	2000017c 	.word	0x2000017c

080045b0 <LCD_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in lcd.h)
 * @return none
 */
void LCD_SetRotation(uint8_t m)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
	LCD_WriteCommand(LCD_MADCTL);	// MADCTL
 80045ba:	2036      	movs	r0, #54	; 0x36
 80045bc:	f7ff ff78 	bl	80044b0 <LCD_WriteCommand>
	switch (m) {
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d81a      	bhi.n	80045fc <LCD_SetRotation+0x4c>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <LCD_SetRotation+0x1c>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080045dd 	.word	0x080045dd
 80045d0:	080045e5 	.word	0x080045e5
 80045d4:	080045ed 	.word	0x080045ed
 80045d8:	080045f5 	.word	0x080045f5
	case 0:
		LCD_WriteSmallData(LCD_MADCTL_MX | LCD_MADCTL_MY | LCD_MADCTL_RGB);
 80045dc:	20c0      	movs	r0, #192	; 0xc0
 80045de:	f7ff ffc3 	bl	8004568 <LCD_WriteSmallData>
		break;
 80045e2:	e00c      	b.n	80045fe <LCD_SetRotation+0x4e>
	case 1:
		LCD_WriteSmallData(LCD_MADCTL_MY | LCD_MADCTL_MV | LCD_MADCTL_RGB);
 80045e4:	20a0      	movs	r0, #160	; 0xa0
 80045e6:	f7ff ffbf 	bl	8004568 <LCD_WriteSmallData>
		break;
 80045ea:	e008      	b.n	80045fe <LCD_SetRotation+0x4e>
	case 2:
		LCD_WriteSmallData(LCD_MADCTL_RGB);
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7ff ffbb 	bl	8004568 <LCD_WriteSmallData>
		break;
 80045f2:	e004      	b.n	80045fe <LCD_SetRotation+0x4e>
	case 3:
		LCD_WriteSmallData(LCD_MADCTL_MX | LCD_MADCTL_MV | LCD_MADCTL_RGB);
 80045f4:	2060      	movs	r0, #96	; 0x60
 80045f6:	f7ff ffb7 	bl	8004568 <LCD_WriteSmallData>
		break;
 80045fa:	e000      	b.n	80045fe <LCD_SetRotation+0x4e>
	default:
		break;
 80045fc:	bf00      	nop
	}
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop

08004608 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	461a      	mov	r2, r3
 8004616:	4623      	mov	r3, r4
 8004618:	80fb      	strh	r3, [r7, #6]
 800461a:	4603      	mov	r3, r0
 800461c:	80bb      	strh	r3, [r7, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	807b      	strh	r3, [r7, #2]
 8004622:	4613      	mov	r3, r2
 8004624:	803b      	strh	r3, [r7, #0]
	LCD_Select();
 8004626:	2200      	movs	r2, #0
 8004628:	2180      	movs	r1, #128	; 0x80
 800462a:	4824      	ldr	r0, [pc, #144]	; (80046bc <LCD_SetAddressWindow+0xb4>)
 800462c:	f7fd fab8 	bl	8001ba0 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	82fb      	strh	r3, [r7, #22]
 8004634:	887b      	ldrh	r3, [r7, #2]
 8004636:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8004638:	88bb      	ldrh	r3, [r7, #4]
 800463a:	827b      	strh	r3, [r7, #18]
 800463c:	883b      	ldrh	r3, [r7, #0]
 800463e:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	LCD_WriteCommand(LCD_CASET); 
 8004640:	202a      	movs	r0, #42	; 0x2a
 8004642:	f7ff ff35 	bl	80044b0 <LCD_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8004646:	8afb      	ldrh	r3, [r7, #22]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	b29b      	uxth	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	733b      	strb	r3, [r7, #12]
 8004650:	8afb      	ldrh	r3, [r7, #22]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	737b      	strb	r3, [r7, #13]
 8004656:	8abb      	ldrh	r3, [r7, #20]
 8004658:	0a1b      	lsrs	r3, r3, #8
 800465a:	b29b      	uxth	r3, r3
 800465c:	b2db      	uxtb	r3, r3
 800465e:	73bb      	strb	r3, [r7, #14]
 8004660:	8abb      	ldrh	r3, [r7, #20]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	73fb      	strb	r3, [r7, #15]
		LCD_WriteData(data, sizeof(data));
 8004666:	f107 030c 	add.w	r3, r7, #12
 800466a:	2104      	movs	r1, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff ff43 	bl	80044f8 <LCD_WriteData>
	}

	/* Row Address set */
	LCD_WriteCommand(LCD_RASET);
 8004672:	202b      	movs	r0, #43	; 0x2b
 8004674:	f7ff ff1c 	bl	80044b0 <LCD_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8004678:	8a7b      	ldrh	r3, [r7, #18]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	b29b      	uxth	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	723b      	strb	r3, [r7, #8]
 8004682:	8a7b      	ldrh	r3, [r7, #18]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	727b      	strb	r3, [r7, #9]
 8004688:	8a3b      	ldrh	r3, [r7, #16]
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	b29b      	uxth	r3, r3
 800468e:	b2db      	uxtb	r3, r3
 8004690:	72bb      	strb	r3, [r7, #10]
 8004692:	8a3b      	ldrh	r3, [r7, #16]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	72fb      	strb	r3, [r7, #11]
		LCD_WriteData(data, sizeof(data));
 8004698:	f107 0308 	add.w	r3, r7, #8
 800469c:	2104      	movs	r1, #4
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff ff2a 	bl	80044f8 <LCD_WriteData>
	}
	/* Write to RAM */
	LCD_WriteCommand(LCD_RAMWR);
 80046a4:	202c      	movs	r0, #44	; 0x2c
 80046a6:	f7ff ff03 	bl	80044b0 <LCD_WriteCommand>
	LCD_UnSelect();
 80046aa:	2201      	movs	r2, #1
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	4803      	ldr	r0, [pc, #12]	; (80046bc <LCD_SetAddressWindow+0xb4>)
 80046b0:	f7fd fa76 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd90      	pop	{r4, r7, pc}
 80046bc:	40020400 	.word	0x40020400

080046c0 <LCD_Init>:
 * @brief Initialize LCD controller
 * @param none
 * @return none
 */
void LCD_Init(void)
{
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b08b      	sub	sp, #44	; 0x2c
 80046c4:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 80046c6:	2019      	movs	r0, #25
 80046c8:	f7fc fc1c 	bl	8000f04 <HAL_Delay>
    LCD_RST_Clr();
 80046cc:	2200      	movs	r2, #0
 80046ce:	2104      	movs	r1, #4
 80046d0:	4846      	ldr	r0, [pc, #280]	; (80047ec <LCD_Init+0x12c>)
 80046d2:	f7fd fa65 	bl	8001ba0 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 80046d6:	2019      	movs	r0, #25
 80046d8:	f7fc fc14 	bl	8000f04 <HAL_Delay>
    LCD_RST_Set();
 80046dc:	2201      	movs	r2, #1
 80046de:	2104      	movs	r1, #4
 80046e0:	4842      	ldr	r0, [pc, #264]	; (80047ec <LCD_Init+0x12c>)
 80046e2:	f7fd fa5d 	bl	8001ba0 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 80046e6:	2032      	movs	r0, #50	; 0x32
 80046e8:	f7fc fc0c 	bl	8000f04 <HAL_Delay>
		
    LCD_WriteCommand(LCD_COLMOD);		//	Set color mode
 80046ec:	203a      	movs	r0, #58	; 0x3a
 80046ee:	f7ff fedf 	bl	80044b0 <LCD_WriteCommand>
    LCD_WriteSmallData(LCD_COLOR_MODE_16bit);
 80046f2:	2055      	movs	r0, #85	; 0x55
 80046f4:	f7ff ff38 	bl	8004568 <LCD_WriteSmallData>
  	LCD_WriteCommand(0xB2);				//	Porch control
 80046f8:	20b2      	movs	r0, #178	; 0xb2
 80046fa:	f7ff fed9 	bl	80044b0 <LCD_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80046fe:	4a3c      	ldr	r2, [pc, #240]	; (80047f0 <LCD_Init+0x130>)
 8004700:	f107 0320 	add.w	r3, r7, #32
 8004704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004708:	6018      	str	r0, [r3, #0]
 800470a:	3304      	adds	r3, #4
 800470c:	7019      	strb	r1, [r3, #0]
		LCD_WriteData(data, sizeof(data));
 800470e:	f107 0320 	add.w	r3, r7, #32
 8004712:	2105      	movs	r1, #5
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff feef 	bl	80044f8 <LCD_WriteData>
	}
	LCD_SetRotation(LCD_ROTATION);	//	MADCTL (Display Rotation)
 800471a:	2004      	movs	r0, #4
 800471c:	f7ff ff48 	bl	80045b0 <LCD_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    LCD_WriteCommand(0XB7);				//	Gate Control
 8004720:	20b7      	movs	r0, #183	; 0xb7
 8004722:	f7ff fec5 	bl	80044b0 <LCD_WriteCommand>
    LCD_WriteSmallData(0x35);			//	Default value
 8004726:	2035      	movs	r0, #53	; 0x35
 8004728:	f7ff ff1e 	bl	8004568 <LCD_WriteSmallData>
    LCD_WriteCommand(0xBB);				//	VCOM setting
 800472c:	20bb      	movs	r0, #187	; 0xbb
 800472e:	f7ff febf 	bl	80044b0 <LCD_WriteCommand>
    LCD_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8004732:	2019      	movs	r0, #25
 8004734:	f7ff ff18 	bl	8004568 <LCD_WriteSmallData>
    LCD_WriteCommand(0xC0);				//	LCMCTRL	
 8004738:	20c0      	movs	r0, #192	; 0xc0
 800473a:	f7ff feb9 	bl	80044b0 <LCD_WriteCommand>
    LCD_WriteSmallData (0x2C);			//	Default value
 800473e:	202c      	movs	r0, #44	; 0x2c
 8004740:	f7ff ff12 	bl	8004568 <LCD_WriteSmallData>
    LCD_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8004744:	20c2      	movs	r0, #194	; 0xc2
 8004746:	f7ff feb3 	bl	80044b0 <LCD_WriteCommand>
    LCD_WriteSmallData (0x01);			//	Default value
 800474a:	2001      	movs	r0, #1
 800474c:	f7ff ff0c 	bl	8004568 <LCD_WriteSmallData>
    LCD_WriteCommand (0xC3);				//	VRH set
 8004750:	20c3      	movs	r0, #195	; 0xc3
 8004752:	f7ff fead 	bl	80044b0 <LCD_WriteCommand>
    LCD_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8004756:	2012      	movs	r0, #18
 8004758:	f7ff ff06 	bl	8004568 <LCD_WriteSmallData>
    LCD_WriteCommand (0xC4);				//	VDV set
 800475c:	20c4      	movs	r0, #196	; 0xc4
 800475e:	f7ff fea7 	bl	80044b0 <LCD_WriteCommand>
    LCD_WriteSmallData (0x20);			//	Default value
 8004762:	2020      	movs	r0, #32
 8004764:	f7ff ff00 	bl	8004568 <LCD_WriteSmallData>
    LCD_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8004768:	20c6      	movs	r0, #198	; 0xc6
 800476a:	f7ff fea1 	bl	80044b0 <LCD_WriteCommand>
    LCD_WriteSmallData (0x0F);			//	Default value (60HZ)
 800476e:	200f      	movs	r0, #15
 8004770:	f7ff fefa 	bl	8004568 <LCD_WriteSmallData>
    LCD_WriteCommand (0xD0);				//	Power control
 8004774:	20d0      	movs	r0, #208	; 0xd0
 8004776:	f7ff fe9b 	bl	80044b0 <LCD_WriteCommand>
    LCD_WriteSmallData (0xA4);			//	Default value
 800477a:	20a4      	movs	r0, #164	; 0xa4
 800477c:	f7ff fef4 	bl	8004568 <LCD_WriteSmallData>
    LCD_WriteSmallData (0xA1);			//	Default value
 8004780:	20a1      	movs	r0, #161	; 0xa1
 8004782:	f7ff fef1 	bl	8004568 <LCD_WriteSmallData>
	/**************** Division line ****************/

	LCD_WriteCommand(0xE0);
 8004786:	20e0      	movs	r0, #224	; 0xe0
 8004788:	f7ff fe92 	bl	80044b0 <LCD_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 800478c:	4b19      	ldr	r3, [pc, #100]	; (80047f4 <LCD_Init+0x134>)
 800478e:	f107 0410 	add.w	r4, r7, #16
 8004792:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004794:	c407      	stmia	r4!, {r0, r1, r2}
 8004796:	8023      	strh	r3, [r4, #0]
		LCD_WriteData(data, sizeof(data));
 8004798:	f107 0310 	add.w	r3, r7, #16
 800479c:	210e      	movs	r1, #14
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff feaa 	bl	80044f8 <LCD_WriteData>
	}

    LCD_WriteCommand(0xE1);
 80047a4:	20e1      	movs	r0, #225	; 0xe1
 80047a6:	f7ff fe83 	bl	80044b0 <LCD_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <LCD_Init+0x138>)
 80047ac:	463c      	mov	r4, r7
 80047ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047b0:	c407      	stmia	r4!, {r0, r1, r2}
 80047b2:	8023      	strh	r3, [r4, #0]
		LCD_WriteData(data, sizeof(data));
 80047b4:	463b      	mov	r3, r7
 80047b6:	210e      	movs	r1, #14
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff fe9d 	bl	80044f8 <LCD_WriteData>
	}
    LCD_WriteCommand (LCD_INVON);		//	Inversion ON
 80047be:	2021      	movs	r0, #33	; 0x21
 80047c0:	f7ff fe76 	bl	80044b0 <LCD_WriteCommand>
	LCD_WriteCommand (LCD_SLPOUT);	//	Out of sleep mode
 80047c4:	2011      	movs	r0, #17
 80047c6:	f7ff fe73 	bl	80044b0 <LCD_WriteCommand>
  	LCD_WriteCommand (LCD_NORON);		//	Normal Display on
 80047ca:	2013      	movs	r0, #19
 80047cc:	f7ff fe70 	bl	80044b0 <LCD_WriteCommand>
  	LCD_WriteCommand (LCD_DISPON);	//	Main screen turned on	
 80047d0:	2029      	movs	r0, #41	; 0x29
 80047d2:	f7ff fe6d 	bl	80044b0 <LCD_WriteCommand>

	HAL_Delay(50);
 80047d6:	2032      	movs	r0, #50	; 0x32
 80047d8:	f7fc fb94 	bl	8000f04 <HAL_Delay>
	LCD_Fill_Color(BLACK);				//	Fill with Black.
 80047dc:	2000      	movs	r0, #0
 80047de:	f000 f80d 	bl	80047fc <LCD_Fill_Color>
}
 80047e2:	bf00      	nop
 80047e4:	372c      	adds	r7, #44	; 0x2c
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd90      	pop	{r4, r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40020400 	.word	0x40020400
 80047f0:	08007214 	.word	0x08007214
 80047f4:	0800721c 	.word	0x0800721c
 80047f8:	0800722c 	.word	0x0800722c

080047fc <LCD_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void LCD_Fill_Color(uint16_t color)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	LCD_SetAddressWindow(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8004806:	f240 133f 	movw	r3, #319	; 0x13f
 800480a:	22ef      	movs	r2, #239	; 0xef
 800480c:	2100      	movs	r1, #0
 800480e:	2000      	movs	r0, #0
 8004810:	f7ff fefa 	bl	8004608 <LCD_SetAddressWindow>
	LCD_Select();
 8004814:	2200      	movs	r2, #0
 8004816:	2180      	movs	r1, #128	; 0x80
 8004818:	4816      	ldr	r0, [pc, #88]	; (8004874 <LCD_Fill_Color+0x78>)
 800481a:	f7fd f9c1 	bl	8001ba0 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			LCD_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < LCD_WIDTH; i++)
 800481e:	2300      	movs	r3, #0
 8004820:	81fb      	strh	r3, [r7, #14]
 8004822:	e01a      	b.n	800485a <LCD_Fill_Color+0x5e>
				for (j = 0; j < LCD_HEIGHT; j++) {
 8004824:	2300      	movs	r3, #0
 8004826:	81bb      	strh	r3, [r7, #12]
 8004828:	e010      	b.n	800484c <LCD_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	b29b      	uxth	r3, r3
 8004830:	b2db      	uxtb	r3, r3
 8004832:	723b      	strb	r3, [r7, #8]
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	727b      	strb	r3, [r7, #9]
					LCD_WriteData(data, sizeof(data));
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	2102      	movs	r1, #2
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff fe59 	bl	80044f8 <LCD_WriteData>
				for (j = 0; j < LCD_HEIGHT; j++) {
 8004846:	89bb      	ldrh	r3, [r7, #12]
 8004848:	3301      	adds	r3, #1
 800484a:	81bb      	strh	r3, [r7, #12]
 800484c:	89bb      	ldrh	r3, [r7, #12]
 800484e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004852:	d3ea      	bcc.n	800482a <LCD_Fill_Color+0x2e>
		for (i = 0; i < LCD_WIDTH; i++)
 8004854:	89fb      	ldrh	r3, [r7, #14]
 8004856:	3301      	adds	r3, #1
 8004858:	81fb      	strh	r3, [r7, #14]
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	2bef      	cmp	r3, #239	; 0xef
 800485e:	d9e1      	bls.n	8004824 <LCD_Fill_Color+0x28>
				}
	#endif
	LCD_UnSelect();
 8004860:	2201      	movs	r2, #1
 8004862:	2180      	movs	r1, #128	; 0x80
 8004864:	4803      	ldr	r0, [pc, #12]	; (8004874 <LCD_Fill_Color+0x78>)
 8004866:	f7fd f99b 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40020400 	.word	0x40020400

08004878 <LCD_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void LCD_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004878:	b082      	sub	sp, #8
 800487a:	b590      	push	{r4, r7, lr}
 800487c:	b089      	sub	sp, #36	; 0x24
 800487e:	af00      	add	r7, sp, #0
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
 8004882:	4603      	mov	r3, r0
 8004884:	80fb      	strh	r3, [r7, #6]
 8004886:	460b      	mov	r3, r1
 8004888:	80bb      	strh	r3, [r7, #4]
 800488a:	4613      	mov	r3, r2
 800488c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	LCD_Select();
 800488e:	2200      	movs	r2, #0
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	4838      	ldr	r0, [pc, #224]	; (8004974 <LCD_WriteChar+0xfc>)
 8004894:	f7fd f984 	bl	8001ba0 <HAL_GPIO_WritePin>
	LCD_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8004898:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800489c:	b29a      	uxth	r2, r3
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	4413      	add	r3, r2
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29c      	uxth	r4, r3
 80048a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	88bb      	ldrh	r3, [r7, #4]
 80048b0:	4413      	add	r3, r2
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	88b9      	ldrh	r1, [r7, #4]
 80048ba:	88f8      	ldrh	r0, [r7, #6]
 80048bc:	4622      	mov	r2, r4
 80048be:	f7ff fea3 	bl	8004608 <LCD_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	e043      	b.n	8004950 <LCD_WriteChar+0xd8>
		b = font.data[(ch - 32) * font.height + i];
 80048c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ca:	78fb      	ldrb	r3, [r7, #3]
 80048cc:	3b20      	subs	r3, #32
 80048ce:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	4619      	mov	r1, r3
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	440b      	add	r3, r1
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	e029      	b.n	800493e <LCD_WriteChar+0xc6>
			if ((b << j) & 0x8000) {
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00e      	beq.n	8004918 <LCD_WriteChar+0xa0>
				uint8_t data[] = {color >> 8, color & 0xFF};
 80048fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	b29b      	uxth	r3, r3
 8004900:	b2db      	uxtb	r3, r3
 8004902:	743b      	strb	r3, [r7, #16]
 8004904:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004906:	b2db      	uxtb	r3, r3
 8004908:	747b      	strb	r3, [r7, #17]
				LCD_WriteData(data, sizeof(data));
 800490a:	f107 0310 	add.w	r3, r7, #16
 800490e:	2102      	movs	r1, #2
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fdf1 	bl	80044f8 <LCD_WriteData>
 8004916:	e00f      	b.n	8004938 <LCD_WriteChar+0xc0>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8004918:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	b29b      	uxth	r3, r3
 8004920:	b2db      	uxtb	r3, r3
 8004922:	733b      	strb	r3, [r7, #12]
 8004924:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004928:	b2db      	uxtb	r3, r3
 800492a:	737b      	strb	r3, [r7, #13]
				LCD_WriteData(data, sizeof(data));
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fde0 	bl	80044f8 <LCD_WriteData>
		for (j = 0; j < font.width; j++) {
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	3301      	adds	r3, #1
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004942:	461a      	mov	r2, r3
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	4293      	cmp	r3, r2
 8004948:	d3cf      	bcc.n	80048ea <LCD_WriteChar+0x72>
	for (i = 0; i < font.height; i++) {
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	3301      	adds	r3, #1
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004954:	461a      	mov	r2, r3
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4293      	cmp	r3, r2
 800495a:	d3b5      	bcc.n	80048c8 <LCD_WriteChar+0x50>
			}
		}
	}
	LCD_UnSelect();
 800495c:	2201      	movs	r2, #1
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	4804      	ldr	r0, [pc, #16]	; (8004974 <LCD_WriteChar+0xfc>)
 8004962:	f7fd f91d 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 8004966:	bf00      	nop
 8004968:	3724      	adds	r7, #36	; 0x24
 800496a:	46bd      	mov	sp, r7
 800496c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004970:	b002      	add	sp, #8
 8004972:	4770      	bx	lr
 8004974:	40020400 	.word	0x40020400

08004978 <LCD_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void LCD_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004978:	b082      	sub	sp, #8
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af04      	add	r7, sp, #16
 8004980:	603a      	str	r2, [r7, #0]
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	4603      	mov	r3, r0
 8004986:	80fb      	strh	r3, [r7, #6]
 8004988:	460b      	mov	r3, r1
 800498a:	80bb      	strh	r3, [r7, #4]
	LCD_Select();
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	4822      	ldr	r0, [pc, #136]	; (8004a1c <LCD_WriteString+0xa4>)
 8004992:	f7fd f905 	bl	8001ba0 <HAL_GPIO_WritePin>
	while (*str) {
 8004996:	e02e      	b.n	80049f6 <LCD_WriteString+0x7e>
		if (x + font.width >= LCD_WIDTH) {
 8004998:	88fb      	ldrh	r3, [r7, #6]
 800499a:	7d3a      	ldrb	r2, [r7, #20]
 800499c:	4413      	add	r3, r2
 800499e:	2bef      	cmp	r3, #239	; 0xef
 80049a0:	dd14      	ble.n	80049cc <LCD_WriteString+0x54>
			x = 0;
 80049a2:	2300      	movs	r3, #0
 80049a4:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80049a6:	7d7b      	ldrb	r3, [r7, #21]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	88bb      	ldrh	r3, [r7, #4]
 80049ac:	4413      	add	r3, r2
 80049ae:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= LCD_HEIGHT) {
 80049b0:	88bb      	ldrh	r3, [r7, #4]
 80049b2:	7d7a      	ldrb	r2, [r7, #21]
 80049b4:	4413      	add	r3, r2
 80049b6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80049ba:	da21      	bge.n	8004a00 <LCD_WriteString+0x88>
				break;
			}

			if (*str == ' ') {
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d103      	bne.n	80049cc <LCD_WriteString+0x54>
				// skip spaces in the beginning of the new line
				str++;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	603b      	str	r3, [r7, #0]
				continue;
 80049ca:	e014      	b.n	80049f6 <LCD_WriteString+0x7e>
			}
		}
		LCD_WriteChar(x, y, *str, font, color, bgcolor);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	781a      	ldrb	r2, [r3, #0]
 80049d0:	88b9      	ldrh	r1, [r7, #4]
 80049d2:	88f8      	ldrh	r0, [r7, #6]
 80049d4:	8c3b      	ldrh	r3, [r7, #32]
 80049d6:	9302      	str	r3, [sp, #8]
 80049d8:	8bbb      	ldrh	r3, [r7, #28]
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f7ff ff49 	bl	8004878 <LCD_WriteChar>
		x += font.width;
 80049e6:	7d3b      	ldrb	r3, [r7, #20]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	88fb      	ldrh	r3, [r7, #6]
 80049ec:	4413      	add	r3, r2
 80049ee:	80fb      	strh	r3, [r7, #6]
		str++;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	603b      	str	r3, [r7, #0]
	while (*str) {
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1cc      	bne.n	8004998 <LCD_WriteString+0x20>
 80049fe:	e000      	b.n	8004a02 <LCD_WriteString+0x8a>
				break;
 8004a00:	bf00      	nop
	}
	LCD_UnSelect();
 8004a02:	2201      	movs	r2, #1
 8004a04:	2180      	movs	r1, #128	; 0x80
 8004a06:	4805      	ldr	r0, [pc, #20]	; (8004a1c <LCD_WriteString+0xa4>)
 8004a08:	f7fd f8ca 	bl	8001ba0 <HAL_GPIO_WritePin>
}
 8004a0c:	bf00      	nop
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a16:	b002      	add	sp, #8
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40020400 	.word	0x40020400

08004a20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <disk_status+0x30>)
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	79fa      	ldrb	r2, [r7, #7]
 8004a38:	4905      	ldr	r1, [pc, #20]	; (8004a50 <disk_status+0x30>)
 8004a3a:	440a      	add	r2, r1
 8004a3c:	7a12      	ldrb	r2, [r2, #8]
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4798      	blx	r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	20000210 	.word	0x20000210

08004a54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	4a0d      	ldr	r2, [pc, #52]	; (8004a9c <disk_initialize+0x48>)
 8004a66:	5cd3      	ldrb	r3, [r2, r3]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d111      	bne.n	8004a90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004a6c:	79fb      	ldrb	r3, [r7, #7]
 8004a6e:	4a0b      	ldr	r2, [pc, #44]	; (8004a9c <disk_initialize+0x48>)
 8004a70:	2101      	movs	r1, #1
 8004a72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <disk_initialize+0x48>)
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	79fa      	ldrb	r2, [r7, #7]
 8004a82:	4906      	ldr	r1, [pc, #24]	; (8004a9c <disk_initialize+0x48>)
 8004a84:	440a      	add	r2, r1
 8004a86:	7a12      	ldrb	r2, [r2, #8]
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4798      	blx	r3
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000210 	.word	0x20000210

08004aa0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	4a0a      	ldr	r2, [pc, #40]	; (8004adc <disk_read+0x3c>)
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	689c      	ldr	r4, [r3, #8]
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	4a07      	ldr	r2, [pc, #28]	; (8004adc <disk_read+0x3c>)
 8004ac0:	4413      	add	r3, r2
 8004ac2:	7a18      	ldrb	r0, [r3, #8]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	47a0      	blx	r4
 8004acc:	4603      	mov	r3, r0
 8004ace:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	371c      	adds	r7, #28
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd90      	pop	{r4, r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000210 	.word	0x20000210

08004ae0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	4603      	mov	r3, r0
 8004aee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <disk_write+0x3c>)
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	68dc      	ldr	r4, [r3, #12]
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <disk_write+0x3c>)
 8004b00:	4413      	add	r3, r2
 8004b02:	7a18      	ldrb	r0, [r3, #8]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	47a0      	blx	r4
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000210 	.word	0x20000210

08004b20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	603a      	str	r2, [r7, #0]
 8004b2a:	71fb      	strb	r3, [r7, #7]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	4a09      	ldr	r2, [pc, #36]	; (8004b58 <disk_ioctl+0x38>)
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	79fa      	ldrb	r2, [r7, #7]
 8004b3e:	4906      	ldr	r1, [pc, #24]	; (8004b58 <disk_ioctl+0x38>)
 8004b40:	440a      	add	r2, r1
 8004b42:	7a10      	ldrb	r0, [r2, #8]
 8004b44:	79b9      	ldrb	r1, [r7, #6]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	4798      	blx	r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000210 	.word	0x20000210

08004b5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3301      	adds	r3, #1
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004b6c:	89fb      	ldrh	r3, [r7, #14]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	b21a      	sxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	b21b      	sxth	r3, r3
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	b21b      	sxth	r3, r3
 8004b7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004b7e:	89fb      	ldrh	r3, [r7, #14]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	3303      	adds	r3, #3
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	021b      	lsls	r3, r3, #8
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	3202      	adds	r2, #2
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	3201      	adds	r2, #1
 8004bb2:	7812      	ldrb	r2, [r2, #0]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	021b      	lsls	r3, r3, #8
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	7812      	ldrb	r2, [r2, #0]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
	return rv;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	887a      	ldrh	r2, [r7, #2]
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	887b      	ldrh	r3, [r7, #2]
 8004bec:	0a1b      	lsrs	r3, r3, #8
 8004bee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	887a      	ldrh	r2, [r7, #2]
 8004bf8:	b2d2      	uxtb	r2, r2
 8004bfa:	701a      	strb	r2, [r3, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	0a1b      	lsrs	r3, r3, #8
 8004c34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	607a      	str	r2, [r7, #4]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	701a      	strb	r2, [r3, #0]
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00d      	beq.n	8004c96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	1c53      	adds	r3, r2, #1
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1c59      	adds	r1, r3, #1
 8004c84:	6179      	str	r1, [r7, #20]
 8004c86:	7812      	ldrb	r2, [r2, #0]
 8004c88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f1      	bne.n	8004c7a <mem_cpy+0x1a>
	}
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	617a      	str	r2, [r7, #20]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	607b      	str	r3, [r7, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f3      	bne.n	8004cb2 <mem_set+0x10>
}
 8004cca:	bf00      	nop
 8004ccc:	bf00      	nop
 8004cce:	371c      	adds	r7, #28
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004cd8:	b480      	push	{r7}
 8004cda:	b089      	sub	sp, #36	; 0x24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	61fb      	str	r3, [r7, #28]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	61fa      	str	r2, [r7, #28]
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	61ba      	str	r2, [r7, #24]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	1acb      	subs	r3, r1, r3
 8004d04:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <mem_cmp+0x40>
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0eb      	beq.n	8004cf0 <mem_cmp+0x18>

	return r;
 8004d18:	697b      	ldr	r3, [r7, #20]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3724      	adds	r7, #36	; 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004d30:	e002      	b.n	8004d38 <chk_chr+0x12>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3301      	adds	r3, #1
 8004d36:	607b      	str	r3, [r7, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <chk_chr+0x26>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d1f2      	bne.n	8004d32 <chk_chr+0xc>
	return *str;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d66:	2300      	movs	r3, #0
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	e029      	b.n	8004dc4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004d70:	4a27      	ldr	r2, [pc, #156]	; (8004e10 <chk_lock+0xb4>)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	4413      	add	r3, r2
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01d      	beq.n	8004dba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d7e:	4a24      	ldr	r2, [pc, #144]	; (8004e10 <chk_lock+0xb4>)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	4413      	add	r3, r2
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d116      	bne.n	8004dbe <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004d90:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <chk_lock+0xb4>)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	4413      	add	r3, r2
 8004d98:	3304      	adds	r3, #4
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d10c      	bne.n	8004dbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004da4:	4a1a      	ldr	r2, [pc, #104]	; (8004e10 <chk_lock+0xb4>)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	4413      	add	r3, r2
 8004dac:	3308      	adds	r3, #8
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d102      	bne.n	8004dbe <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004db8:	e007      	b.n	8004dca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d9d2      	bls.n	8004d70 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d109      	bne.n	8004de4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <chk_lock+0x80>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d101      	bne.n	8004de0 <chk_lock+0x84>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	e010      	b.n	8004e02 <chk_lock+0xa6>
 8004de0:	2312      	movs	r3, #18
 8004de2:	e00e      	b.n	8004e02 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d108      	bne.n	8004dfc <chk_lock+0xa0>
 8004dea:	4a09      	ldr	r2, [pc, #36]	; (8004e10 <chk_lock+0xb4>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	4413      	add	r3, r2
 8004df2:	330c      	adds	r3, #12
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfa:	d101      	bne.n	8004e00 <chk_lock+0xa4>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	e000      	b.n	8004e02 <chk_lock+0xa6>
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	200001f0 	.word	0x200001f0

08004e14 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	e002      	b.n	8004e26 <enq_lock+0x12>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3301      	adds	r3, #1
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d806      	bhi.n	8004e3a <enq_lock+0x26>
 8004e2c:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <enq_lock+0x40>)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	4413      	add	r3, r2
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f2      	bne.n	8004e20 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	200001f0 	.word	0x200001f0

08004e58 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e01f      	b.n	8004ea8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004e68:	4a41      	ldr	r2, [pc, #260]	; (8004f70 <inc_lock+0x118>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	4413      	add	r3, r2
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d113      	bne.n	8004ea2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004e7a:	4a3d      	ldr	r2, [pc, #244]	; (8004f70 <inc_lock+0x118>)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4413      	add	r3, r2
 8004e82:	3304      	adds	r3, #4
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d109      	bne.n	8004ea2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004e8e:	4a38      	ldr	r2, [pc, #224]	; (8004f70 <inc_lock+0x118>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	4413      	add	r3, r2
 8004e96:	3308      	adds	r3, #8
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d006      	beq.n	8004eb0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d9dc      	bls.n	8004e68 <inc_lock+0x10>
 8004eae:	e000      	b.n	8004eb2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004eb0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d132      	bne.n	8004f1e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	e002      	b.n	8004ec4 <inc_lock+0x6c>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d806      	bhi.n	8004ed8 <inc_lock+0x80>
 8004eca:	4a29      	ldr	r2, [pc, #164]	; (8004f70 <inc_lock+0x118>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	011b      	lsls	r3, r3, #4
 8004ed0:	4413      	add	r3, r2
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1f2      	bne.n	8004ebe <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d101      	bne.n	8004ee2 <inc_lock+0x8a>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e040      	b.n	8004f64 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4922      	ldr	r1, [pc, #136]	; (8004f70 <inc_lock+0x118>)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	440b      	add	r3, r1
 8004eee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	491e      	ldr	r1, [pc, #120]	; (8004f70 <inc_lock+0x118>)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	440b      	add	r3, r1
 8004efc:	3304      	adds	r3, #4
 8004efe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	491a      	ldr	r1, [pc, #104]	; (8004f70 <inc_lock+0x118>)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	440b      	add	r3, r1
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004f10:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <inc_lock+0x118>)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	4413      	add	r3, r2
 8004f18:	330c      	adds	r3, #12
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d009      	beq.n	8004f38 <inc_lock+0xe0>
 8004f24:	4a12      	ldr	r2, [pc, #72]	; (8004f70 <inc_lock+0x118>)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	4413      	add	r3, r2
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <inc_lock+0xe0>
 8004f34:	2300      	movs	r3, #0
 8004f36:	e015      	b.n	8004f64 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d108      	bne.n	8004f50 <inc_lock+0xf8>
 8004f3e:	4a0c      	ldr	r2, [pc, #48]	; (8004f70 <inc_lock+0x118>)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	4413      	add	r3, r2
 8004f46:	330c      	adds	r3, #12
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	e001      	b.n	8004f54 <inc_lock+0xfc>
 8004f50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f54:	4906      	ldr	r1, [pc, #24]	; (8004f70 <inc_lock+0x118>)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	440b      	add	r3, r1
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	3301      	adds	r3, #1
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	200001f0 	.word	0x200001f0

08004f74 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d825      	bhi.n	8004fd4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004f88:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <dec_lock+0x74>)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	4413      	add	r3, r2
 8004f90:	330c      	adds	r3, #12
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004f96:	89fb      	ldrh	r3, [r7, #14]
 8004f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9c:	d101      	bne.n	8004fa2 <dec_lock+0x2e>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004fa2:	89fb      	ldrh	r3, [r7, #14]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <dec_lock+0x3a>
 8004fa8:	89fb      	ldrh	r3, [r7, #14]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004fae:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <dec_lock+0x74>)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	4413      	add	r3, r2
 8004fb6:	330c      	adds	r3, #12
 8004fb8:	89fa      	ldrh	r2, [r7, #14]
 8004fba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d105      	bne.n	8004fce <dec_lock+0x5a>
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <dec_lock+0x74>)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	4413      	add	r3, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	737b      	strb	r3, [r7, #13]
 8004fd2:	e001      	b.n	8004fd8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004fd8:	7b7b      	ldrb	r3, [r7, #13]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	200001f0 	.word	0x200001f0

08004fec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e010      	b.n	800501c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004ffa:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <clear_lock+0x44>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	4413      	add	r3, r2
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	429a      	cmp	r2, r3
 8005008:	d105      	bne.n	8005016 <clear_lock+0x2a>
 800500a:	4a09      	ldr	r2, [pc, #36]	; (8005030 <clear_lock+0x44>)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	4413      	add	r3, r2
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	3301      	adds	r3, #1
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d9eb      	bls.n	8004ffa <clear_lock+0xe>
	}
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	200001f0 	.word	0x200001f0

08005034 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	78db      	ldrb	r3, [r3, #3]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d034      	beq.n	80050b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	7858      	ldrb	r0, [r3, #1]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005058:	2301      	movs	r3, #1
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	f7ff fd40 	bl	8004ae0 <disk_write>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d002      	beq.n	800506c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
 800506a:	e022      	b.n	80050b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	1ad2      	subs	r2, r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	429a      	cmp	r2, r3
 8005080:	d217      	bcs.n	80050b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	789b      	ldrb	r3, [r3, #2]
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	e010      	b.n	80050ac <sync_window+0x78>
					wsect += fs->fsize;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4413      	add	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	7858      	ldrb	r0, [r3, #1]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800509e:	2301      	movs	r3, #1
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	f7ff fd1d 	bl	8004ae0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	3b01      	subs	r3, #1
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d8eb      	bhi.n	800508a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d01b      	beq.n	800510c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff ffad 	bl	8005034 <sync_window>
 80050da:	4603      	mov	r3, r0
 80050dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80050de:	7bfb      	ldrb	r3, [r7, #15]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d113      	bne.n	800510c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	7858      	ldrb	r0, [r3, #1]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80050ee:	2301      	movs	r3, #1
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	f7ff fcd5 	bl	8004aa0 <disk_read>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d004      	beq.n	8005106 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80050fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005100:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005102:	2301      	movs	r3, #1
 8005104:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ff87 	bl	8005034 <sync_window>
 8005126:	4603      	mov	r3, r0
 8005128:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d159      	bne.n	80051e4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d149      	bne.n	80051cc <sync_fs+0xb4>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	791b      	ldrb	r3, [r3, #4]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d145      	bne.n	80051cc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	899b      	ldrh	r3, [r3, #12]
 800514a:	461a      	mov	r2, r3
 800514c:	2100      	movs	r1, #0
 800514e:	f7ff fda8 	bl	8004ca2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3334      	adds	r3, #52	; 0x34
 8005156:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800515a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fd37 	bl	8004bd2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3334      	adds	r3, #52	; 0x34
 8005168:	4921      	ldr	r1, [pc, #132]	; (80051f0 <sync_fs+0xd8>)
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fd4c 	bl	8004c08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3334      	adds	r3, #52	; 0x34
 8005174:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005178:	491e      	ldr	r1, [pc, #120]	; (80051f4 <sync_fs+0xdc>)
 800517a:	4618      	mov	r0, r3
 800517c:	f7ff fd44 	bl	8004c08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3334      	adds	r3, #52	; 0x34
 8005184:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7ff fd3a 	bl	8004c08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3334      	adds	r3, #52	; 0x34
 8005198:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7ff fd30 	bl	8004c08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7858      	ldrb	r0, [r3, #1]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c0:	2301      	movs	r3, #1
 80051c2:	f7ff fc8d 	bl	8004ae0 <disk_write>
			fs->fsi_flag = 0;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	785b      	ldrb	r3, [r3, #1]
 80051d0:	2200      	movs	r2, #0
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f7ff fca3 	bl	8004b20 <disk_ioctl>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <sync_fs+0xcc>
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	41615252 	.word	0x41615252
 80051f4:	61417272 	.word	0x61417272

080051f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	3b02      	subs	r3, #2
 8005206:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	3b02      	subs	r3, #2
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d301      	bcc.n	8005218 <clust2sect+0x20>
 8005214:	2300      	movs	r3, #0
 8005216:	e008      	b.n	800522a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	895b      	ldrh	r3, [r3, #10]
 800521c:	461a      	mov	r2, r3
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	fb03 f202 	mul.w	r2, r3, r2
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	4413      	add	r3, r2
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b086      	sub	sp, #24
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d904      	bls.n	8005256 <get_fat+0x20>
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d302      	bcc.n	800525c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005256:	2301      	movs	r3, #1
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e0bb      	b.n	80053d4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800525c:	f04f 33ff 	mov.w	r3, #4294967295
 8005260:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b03      	cmp	r3, #3
 8005268:	f000 8083 	beq.w	8005372 <get_fat+0x13c>
 800526c:	2b03      	cmp	r3, #3
 800526e:	f300 80a7 	bgt.w	80053c0 <get_fat+0x18a>
 8005272:	2b01      	cmp	r3, #1
 8005274:	d002      	beq.n	800527c <get_fat+0x46>
 8005276:	2b02      	cmp	r3, #2
 8005278:	d056      	beq.n	8005328 <get_fat+0xf2>
 800527a:	e0a1      	b.n	80053c0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	899b      	ldrh	r3, [r3, #12]
 8005292:	4619      	mov	r1, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	fbb3 f3f1 	udiv	r3, r3, r1
 800529a:	4413      	add	r3, r2
 800529c:	4619      	mov	r1, r3
 800529e:	6938      	ldr	r0, [r7, #16]
 80052a0:	f7ff ff0c 	bl	80050bc <move_window>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 808d 	bne.w	80053c6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	60fa      	str	r2, [r7, #12]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	8992      	ldrh	r2, [r2, #12]
 80052b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80052ba:	fb01 f202 	mul.w	r2, r1, r2
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4413      	add	r3, r2
 80052c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	899b      	ldrh	r3, [r3, #12]
 80052d2:	4619      	mov	r1, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80052da:	4413      	add	r3, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	6938      	ldr	r0, [r7, #16]
 80052e0:	f7ff feec 	bl	80050bc <move_window>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d16f      	bne.n	80053ca <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	899b      	ldrh	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80052f6:	fb01 f202 	mul.w	r2, r1, r2
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	461a      	mov	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <get_fat+0xe8>
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	091b      	lsrs	r3, r3, #4
 800531c:	e002      	b.n	8005324 <get_fat+0xee>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005324:	617b      	str	r3, [r7, #20]
			break;
 8005326:	e055      	b.n	80053d4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	899b      	ldrh	r3, [r3, #12]
 8005330:	085b      	lsrs	r3, r3, #1
 8005332:	b29b      	uxth	r3, r3
 8005334:	4619      	mov	r1, r3
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	fbb3 f3f1 	udiv	r3, r3, r1
 800533c:	4413      	add	r3, r2
 800533e:	4619      	mov	r1, r3
 8005340:	6938      	ldr	r0, [r7, #16]
 8005342:	f7ff febb 	bl	80050bc <move_window>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d140      	bne.n	80053ce <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	8992      	ldrh	r2, [r2, #12]
 800535a:	fbb3 f0f2 	udiv	r0, r3, r2
 800535e:	fb00 f202 	mul.w	r2, r0, r2
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	440b      	add	r3, r1
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff fbf8 	bl	8004b5c <ld_word>
 800536c:	4603      	mov	r3, r0
 800536e:	617b      	str	r3, [r7, #20]
			break;
 8005370:	e030      	b.n	80053d4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	899b      	ldrh	r3, [r3, #12]
 800537a:	089b      	lsrs	r3, r3, #2
 800537c:	b29b      	uxth	r3, r3
 800537e:	4619      	mov	r1, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	fbb3 f3f1 	udiv	r3, r3, r1
 8005386:	4413      	add	r3, r2
 8005388:	4619      	mov	r1, r3
 800538a:	6938      	ldr	r0, [r7, #16]
 800538c:	f7ff fe96 	bl	80050bc <move_window>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d11d      	bne.n	80053d2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	8992      	ldrh	r2, [r2, #12]
 80053a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80053a8:	fb00 f202 	mul.w	r2, r0, r2
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	440b      	add	r3, r1
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7ff fbeb 	bl	8004b8c <ld_dword>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80053bc:	617b      	str	r3, [r7, #20]
			break;
 80053be:	e009      	b.n	80053d4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80053c0:	2301      	movs	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e006      	b.n	80053d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053c6:	bf00      	nop
 80053c8:	e004      	b.n	80053d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80053ca:	bf00      	nop
 80053cc:	e002      	b.n	80053d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80053ce:	bf00      	nop
 80053d0:	e000      	b.n	80053d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80053d2:	bf00      	nop
		}
	}

	return val;
 80053d4:	697b      	ldr	r3, [r7, #20]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80053de:	b590      	push	{r4, r7, lr}
 80053e0:	b089      	sub	sp, #36	; 0x24
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80053ea:	2302      	movs	r3, #2
 80053ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	f240 8102 	bls.w	80055fa <put_fat+0x21c>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	f080 80fc 	bcs.w	80055fa <put_fat+0x21c>
		switch (fs->fs_type) {
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b03      	cmp	r3, #3
 8005408:	f000 80b6 	beq.w	8005578 <put_fat+0x19a>
 800540c:	2b03      	cmp	r3, #3
 800540e:	f300 80fd 	bgt.w	800560c <put_fat+0x22e>
 8005412:	2b01      	cmp	r3, #1
 8005414:	d003      	beq.n	800541e <put_fat+0x40>
 8005416:	2b02      	cmp	r3, #2
 8005418:	f000 8083 	beq.w	8005522 <put_fat+0x144>
 800541c:	e0f6      	b.n	800560c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	61bb      	str	r3, [r7, #24]
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	085b      	lsrs	r3, r3, #1
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	4413      	add	r3, r2
 800542a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	899b      	ldrh	r3, [r3, #12]
 8005434:	4619      	mov	r1, r3
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	fbb3 f3f1 	udiv	r3, r3, r1
 800543c:	4413      	add	r3, r2
 800543e:	4619      	mov	r1, r3
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff fe3b 	bl	80050bc <move_window>
 8005446:	4603      	mov	r3, r0
 8005448:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800544a:	7ffb      	ldrb	r3, [r7, #31]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f040 80d6 	bne.w	80055fe <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	61ba      	str	r2, [r7, #24]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	8992      	ldrh	r2, [r2, #12]
 8005462:	fbb3 f0f2 	udiv	r0, r3, r2
 8005466:	fb00 f202 	mul.w	r2, r0, r2
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	440b      	add	r3, r1
 800546e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <put_fat+0xb8>
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b25b      	sxtb	r3, r3
 8005480:	f003 030f 	and.w	r3, r3, #15
 8005484:	b25a      	sxtb	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	b25b      	sxtb	r3, r3
 800548e:	4313      	orrs	r3, r2
 8005490:	b25b      	sxtb	r3, r3
 8005492:	b2db      	uxtb	r3, r3
 8005494:	e001      	b.n	800549a <put_fat+0xbc>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	899b      	ldrh	r3, [r3, #12]
 80054ac:	4619      	mov	r1, r3
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80054b4:	4413      	add	r3, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f7ff fdff 	bl	80050bc <move_window>
 80054be:	4603      	mov	r3, r0
 80054c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054c2:	7ffb      	ldrb	r3, [r7, #31]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 809c 	bne.w	8005602 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	899b      	ldrh	r3, [r3, #12]
 80054d4:	461a      	mov	r2, r3
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80054dc:	fb00 f202 	mul.w	r2, r0, r2
 80054e0:	1a9b      	subs	r3, r3, r2
 80054e2:	440b      	add	r3, r1
 80054e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <put_fat+0x11a>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e00e      	b.n	8005516 <put_fat+0x138>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	b25b      	sxtb	r3, r3
 80054fe:	f023 030f 	bic.w	r3, r3, #15
 8005502:	b25a      	sxtb	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	b25b      	sxtb	r3, r3
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	b25b      	sxtb	r3, r3
 8005510:	4313      	orrs	r3, r2
 8005512:	b25b      	sxtb	r3, r3
 8005514:	b2db      	uxtb	r3, r3
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	70da      	strb	r2, [r3, #3]
			break;
 8005520:	e074      	b.n	800560c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	899b      	ldrh	r3, [r3, #12]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	b29b      	uxth	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	fbb3 f3f1 	udiv	r3, r3, r1
 8005536:	4413      	add	r3, r2
 8005538:	4619      	mov	r1, r3
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f7ff fdbe 	bl	80050bc <move_window>
 8005540:	4603      	mov	r3, r0
 8005542:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005544:	7ffb      	ldrb	r3, [r7, #31]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d15d      	bne.n	8005606 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	8992      	ldrh	r2, [r2, #12]
 8005558:	fbb3 f0f2 	udiv	r0, r3, r2
 800555c:	fb00 f202 	mul.w	r2, r0, r2
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	440b      	add	r3, r1
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	b292      	uxth	r2, r2
 8005568:	4611      	mov	r1, r2
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff fb31 	bl	8004bd2 <st_word>
			fs->wflag = 1;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	70da      	strb	r2, [r3, #3]
			break;
 8005576:	e049      	b.n	800560c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	899b      	ldrh	r3, [r3, #12]
 8005580:	089b      	lsrs	r3, r3, #2
 8005582:	b29b      	uxth	r3, r3
 8005584:	4619      	mov	r1, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	fbb3 f3f1 	udiv	r3, r3, r1
 800558c:	4413      	add	r3, r2
 800558e:	4619      	mov	r1, r3
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff fd93 	bl	80050bc <move_window>
 8005596:	4603      	mov	r3, r0
 8005598:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800559a:	7ffb      	ldrb	r3, [r7, #31]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d134      	bne.n	800560a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	8992      	ldrh	r2, [r2, #12]
 80055b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80055b8:	fb00 f202 	mul.w	r2, r0, r2
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	440b      	add	r3, r1
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7ff fae3 	bl	8004b8c <ld_dword>
 80055c6:	4603      	mov	r3, r0
 80055c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80055cc:	4323      	orrs	r3, r4
 80055ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	8992      	ldrh	r2, [r2, #12]
 80055de:	fbb3 f0f2 	udiv	r0, r3, r2
 80055e2:	fb00 f202 	mul.w	r2, r0, r2
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	440b      	add	r3, r1
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff fb0b 	bl	8004c08 <st_dword>
			fs->wflag = 1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	70da      	strb	r2, [r3, #3]
			break;
 80055f8:	e008      	b.n	800560c <put_fat+0x22e>
		}
	}
 80055fa:	bf00      	nop
 80055fc:	e006      	b.n	800560c <put_fat+0x22e>
			if (res != FR_OK) break;
 80055fe:	bf00      	nop
 8005600:	e004      	b.n	800560c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <put_fat+0x22e>
			if (res != FR_OK) break;
 800560a:	bf00      	nop
	return res;
 800560c:	7ffb      	ldrb	r3, [r7, #31]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3724      	adds	r7, #36	; 0x24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd90      	pop	{r4, r7, pc}

08005616 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b088      	sub	sp, #32
 800561a:	af00      	add	r7, sp, #0
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d904      	bls.n	800563c <remove_chain+0x26>
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	d301      	bcc.n	8005640 <remove_chain+0x2a>
 800563c:	2302      	movs	r3, #2
 800563e:	e04b      	b.n	80056d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00c      	beq.n	8005660 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005646:	f04f 32ff 	mov.w	r2, #4294967295
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	69b8      	ldr	r0, [r7, #24]
 800564e:	f7ff fec6 	bl	80053de <put_fat>
 8005652:	4603      	mov	r3, r0
 8005654:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005656:	7ffb      	ldrb	r3, [r7, #31]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <remove_chain+0x4a>
 800565c:	7ffb      	ldrb	r3, [r7, #31]
 800565e:	e03b      	b.n	80056d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f7ff fde7 	bl	8005236 <get_fat>
 8005668:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d031      	beq.n	80056d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d101      	bne.n	800567a <remove_chain+0x64>
 8005676:	2302      	movs	r3, #2
 8005678:	e02e      	b.n	80056d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d101      	bne.n	8005686 <remove_chain+0x70>
 8005682:	2301      	movs	r3, #1
 8005684:	e028      	b.n	80056d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005686:	2200      	movs	r2, #0
 8005688:	68b9      	ldr	r1, [r7, #8]
 800568a:	69b8      	ldr	r0, [r7, #24]
 800568c:	f7ff fea7 	bl	80053de <put_fat>
 8005690:	4603      	mov	r3, r0
 8005692:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005694:	7ffb      	ldrb	r3, [r7, #31]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <remove_chain+0x88>
 800569a:	7ffb      	ldrb	r3, [r7, #31]
 800569c:	e01c      	b.n	80056d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	3b02      	subs	r3, #2
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d20b      	bcs.n	80056c4 <remove_chain+0xae>
			fs->free_clst++;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	791b      	ldrb	r3, [r3, #4]
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d3c6      	bcc.n	8005660 <remove_chain+0x4a>
 80056d2:	e000      	b.n	80056d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80056d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d004      	beq.n	800570c <create_chain+0x2c>
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	429a      	cmp	r2, r3
 800570a:	d31b      	bcc.n	8005744 <create_chain+0x64>
 800570c:	2301      	movs	r3, #1
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	e018      	b.n	8005744 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff fd8e 	bl	8005236 <get_fat>
 800571a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d801      	bhi.n	8005726 <create_chain+0x46>
 8005722:	2301      	movs	r3, #1
 8005724:	e070      	b.n	8005808 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572c:	d101      	bne.n	8005732 <create_chain+0x52>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	e06a      	b.n	8005808 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	429a      	cmp	r2, r3
 800573a:	d201      	bcs.n	8005740 <create_chain+0x60>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	e063      	b.n	8005808 <create_chain+0x128>
		scl = clst;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	3301      	adds	r3, #1
 800574c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	429a      	cmp	r2, r3
 8005756:	d307      	bcc.n	8005768 <create_chain+0x88>
				ncl = 2;
 8005758:	2302      	movs	r3, #2
 800575a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	429a      	cmp	r2, r3
 8005762:	d901      	bls.n	8005768 <create_chain+0x88>
 8005764:	2300      	movs	r3, #0
 8005766:	e04f      	b.n	8005808 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fd63 	bl	8005236 <get_fat>
 8005770:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00e      	beq.n	8005796 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d003      	beq.n	8005786 <create_chain+0xa6>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d101      	bne.n	800578a <create_chain+0xaa>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	e03e      	b.n	8005808 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800578a:	69fa      	ldr	r2, [r7, #28]
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	429a      	cmp	r2, r3
 8005790:	d1da      	bne.n	8005748 <create_chain+0x68>
 8005792:	2300      	movs	r3, #0
 8005794:	e038      	b.n	8005808 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005796:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	69f9      	ldr	r1, [r7, #28]
 800579e:	6938      	ldr	r0, [r7, #16]
 80057a0:	f7ff fe1d 	bl	80053de <put_fat>
 80057a4:	4603      	mov	r3, r0
 80057a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <create_chain+0xe2>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d006      	beq.n	80057c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6938      	ldr	r0, [r7, #16]
 80057ba:	f7ff fe10 	bl	80053de <put_fat>
 80057be:	4603      	mov	r3, r0
 80057c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d116      	bne.n	80057f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	695a      	ldr	r2, [r3, #20]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	3b02      	subs	r3, #2
 80057d8:	429a      	cmp	r2, r3
 80057da:	d804      	bhi.n	80057e6 <create_chain+0x106>
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	1e5a      	subs	r2, r3, #1
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	791b      	ldrb	r3, [r3, #4]
 80057ea:	f043 0301 	orr.w	r3, r3, #1
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	711a      	strb	r2, [r3, #4]
 80057f4:	e007      	b.n	8005806 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80057f6:	7dfb      	ldrb	r3, [r7, #23]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d102      	bne.n	8005802 <create_chain+0x122>
 80057fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005800:	e000      	b.n	8005804 <create_chain+0x124>
 8005802:	2301      	movs	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005806:	69fb      	ldr	r3, [r7, #28]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	3304      	adds	r3, #4
 8005826:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	899b      	ldrh	r3, [r3, #12]
 800582c:	461a      	mov	r2, r3
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	fbb3 f3f2 	udiv	r3, r3, r2
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	8952      	ldrh	r2, [r2, #10]
 8005838:	fbb3 f3f2 	udiv	r3, r3, r2
 800583c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1d1a      	adds	r2, r3, #4
 8005842:	613a      	str	r2, [r7, #16]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <clmt_clust+0x42>
 800584e:	2300      	movs	r3, #0
 8005850:	e010      	b.n	8005874 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	429a      	cmp	r2, r3
 8005858:	d307      	bcc.n	800586a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	3304      	adds	r3, #4
 8005866:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005868:	e7e9      	b.n	800583e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800586a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
}
 8005874:	4618      	mov	r0, r3
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005896:	d204      	bcs.n	80058a2 <dir_sdi+0x22>
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80058a2:	2302      	movs	r3, #2
 80058a4:	e071      	b.n	800598a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d106      	bne.n	80058c6 <dir_sdi+0x46>
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d902      	bls.n	80058c6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10c      	bne.n	80058e6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	095b      	lsrs	r3, r3, #5
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	8912      	ldrh	r2, [r2, #8]
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d301      	bcc.n	80058dc <dir_sdi+0x5c>
 80058d8:	2302      	movs	r3, #2
 80058da:	e056      	b.n	800598a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	61da      	str	r2, [r3, #28]
 80058e4:	e02d      	b.n	8005942 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	895b      	ldrh	r3, [r3, #10]
 80058ea:	461a      	mov	r2, r3
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	899b      	ldrh	r3, [r3, #12]
 80058f0:	fb02 f303 	mul.w	r3, r2, r3
 80058f4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80058f6:	e019      	b.n	800592c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6979      	ldr	r1, [r7, #20]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff fc9a 	bl	8005236 <get_fat>
 8005902:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d101      	bne.n	8005910 <dir_sdi+0x90>
 800590c:	2301      	movs	r3, #1
 800590e:	e03c      	b.n	800598a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d904      	bls.n	8005920 <dir_sdi+0xa0>
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	429a      	cmp	r2, r3
 800591e:	d301      	bcc.n	8005924 <dir_sdi+0xa4>
 8005920:	2302      	movs	r3, #2
 8005922:	e032      	b.n	800598a <dir_sdi+0x10a>
			ofs -= csz;
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800592c:	683a      	ldr	r2, [r7, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	429a      	cmp	r2, r3
 8005932:	d2e1      	bcs.n	80058f8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005934:	6979      	ldr	r1, [r7, #20]
 8005936:	6938      	ldr	r0, [r7, #16]
 8005938:	f7ff fc5e 	bl	80051f8 <clust2sect>
 800593c:	4602      	mov	r2, r0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <dir_sdi+0xd4>
 8005950:	2302      	movs	r3, #2
 8005952:	e01a      	b.n	800598a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	899b      	ldrh	r3, [r3, #12]
 800595c:	4619      	mov	r1, r3
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	fbb3 f3f1 	udiv	r3, r3, r1
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	899b      	ldrh	r3, [r3, #12]
 8005974:	461a      	mov	r2, r3
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	fbb3 f0f2 	udiv	r0, r3, r2
 800597c:	fb00 f202 	mul.w	r2, r0, r2
 8005980:	1a9b      	subs	r3, r3, r2
 8005982:	18ca      	adds	r2, r1, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b086      	sub	sp, #24
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	3320      	adds	r3, #32
 80059a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <dir_next+0x28>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059b8:	d301      	bcc.n	80059be <dir_next+0x2c>
 80059ba:	2304      	movs	r3, #4
 80059bc:	e0bb      	b.n	8005b36 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	899b      	ldrh	r3, [r3, #12]
 80059c2:	461a      	mov	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80059ca:	fb01 f202 	mul.w	r2, r1, r2
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f040 809d 	bne.w	8005b10 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10b      	bne.n	8005a00 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	8912      	ldrh	r2, [r2, #8]
 80059f0:	4293      	cmp	r3, r2
 80059f2:	f0c0 808d 	bcc.w	8005b10 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	61da      	str	r2, [r3, #28]
 80059fc:	2304      	movs	r3, #4
 80059fe:	e09a      	b.n	8005b36 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	899b      	ldrh	r3, [r3, #12]
 8005a04:	461a      	mov	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	8952      	ldrh	r2, [r2, #10]
 8005a10:	3a01      	subs	r2, #1
 8005a12:	4013      	ands	r3, r2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d17b      	bne.n	8005b10 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f7ff fc08 	bl	8005236 <get_fat>
 8005a26:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d801      	bhi.n	8005a32 <dir_next+0xa0>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e081      	b.n	8005b36 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d101      	bne.n	8005a3e <dir_next+0xac>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e07b      	b.n	8005b36 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d359      	bcc.n	8005afc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d104      	bne.n	8005a58 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	61da      	str	r2, [r3, #28]
 8005a54:	2304      	movs	r3, #4
 8005a56:	e06e      	b.n	8005b36 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	4610      	mov	r0, r2
 8005a62:	f7ff fe3d 	bl	80056e0 <create_chain>
 8005a66:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <dir_next+0xe0>
 8005a6e:	2307      	movs	r3, #7
 8005a70:	e061      	b.n	8005b36 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <dir_next+0xea>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e05c      	b.n	8005b36 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a82:	d101      	bne.n	8005a88 <dir_next+0xf6>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e056      	b.n	8005b36 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7ff fad3 	bl	8005034 <sync_window>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <dir_next+0x106>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e04e      	b.n	8005b36 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	899b      	ldrh	r3, [r3, #12]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	f7ff f8fc 	bl	8004ca2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005aaa:	2300      	movs	r3, #0
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fba1 	bl	80051f8 <clust2sect>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
 8005abc:	e012      	b.n	8005ae4 <dir_next+0x152>
						fs->wflag = 1;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff fab5 	bl	8005034 <sync_window>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d001      	beq.n	8005ad4 <dir_next+0x142>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e030      	b.n	8005b36 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	895b      	ldrh	r3, [r3, #10]
 8005ae8:	461a      	mov	r2, r3
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d3e6      	bcc.n	8005abe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f7ff fb77 	bl	80051f8 <clust2sect>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	899b      	ldrh	r3, [r3, #12]
 8005b20:	461a      	mov	r2, r3
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b28:	fb00 f202 	mul.w	r2, r0, r2
 8005b2c:	1a9b      	subs	r3, r3, r2
 8005b2e:	18ca      	adds	r2, r1, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b086      	sub	sp, #24
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005b4e:	2100      	movs	r1, #0
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff fe95 	bl	8005880 <dir_sdi>
 8005b56:	4603      	mov	r3, r0
 8005b58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d12b      	bne.n	8005bb8 <dir_alloc+0x7a>
		n = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	4619      	mov	r1, r3
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f7ff faa6 	bl	80050bc <move_window>
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005b74:	7dfb      	ldrb	r3, [r7, #23]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11d      	bne.n	8005bb6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2be5      	cmp	r3, #229	; 0xe5
 8005b82:	d004      	beq.n	8005b8e <dir_alloc+0x50>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d107      	bne.n	8005b9e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	3301      	adds	r3, #1
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d102      	bne.n	8005ba2 <dir_alloc+0x64>
 8005b9c:	e00c      	b.n	8005bb8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff fef4 	bl	8005992 <dir_next>
 8005baa:	4603      	mov	r3, r0
 8005bac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0d7      	beq.n	8005b64 <dir_alloc+0x26>
 8005bb4:	e000      	b.n	8005bb8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005bb6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005bb8:	7dfb      	ldrb	r3, [r7, #23]
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d101      	bne.n	8005bc2 <dir_alloc+0x84>
 8005bbe:	2307      	movs	r3, #7
 8005bc0:	75fb      	strb	r3, [r7, #23]
	return res;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	331a      	adds	r3, #26
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7fe ffbe 	bl	8004b5c <ld_word>
 8005be0:	4603      	mov	r3, r0
 8005be2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b03      	cmp	r3, #3
 8005bea:	d109      	bne.n	8005c00 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fe ffb3 	bl	8004b5c <ld_word>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	041b      	lsls	r3, r3, #16
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005c00:	68fb      	ldr	r3, [r7, #12]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	331a      	adds	r3, #26
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	b292      	uxth	r2, r2
 8005c1e:	4611      	mov	r1, r2
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fe ffd6 	bl	8004bd2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d109      	bne.n	8005c42 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f103 0214 	add.w	r2, r3, #20
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	0c1b      	lsrs	r3, r3, #16
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	f7fe ffc8 	bl	8004bd2 <st_word>
	}
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c58:	2100      	movs	r1, #0
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff fe10 	bl	8005880 <dir_sdi>
 8005c60:	4603      	mov	r3, r0
 8005c62:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <dir_find+0x24>
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	e03e      	b.n	8005cec <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	4619      	mov	r1, r3
 8005c74:	6938      	ldr	r0, [r7, #16]
 8005c76:	f7ff fa21 	bl	80050bc <move_window>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d12f      	bne.n	8005ce4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <dir_find+0x4e>
 8005c92:	2304      	movs	r3, #4
 8005c94:	75fb      	strb	r3, [r7, #23]
 8005c96:	e028      	b.n	8005cea <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	330b      	adds	r3, #11
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	330b      	adds	r3, #11
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <dir_find+0x86>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a18      	ldr	r0, [r3, #32]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3324      	adds	r3, #36	; 0x24
 8005cc2:	220b      	movs	r2, #11
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f7ff f807 	bl	8004cd8 <mem_cmp>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00b      	beq.n	8005ce8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff fe5d 	bl	8005992 <dir_next>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0c5      	beq.n	8005c6e <dir_find+0x24>
 8005ce2:	e002      	b.n	8005cea <dir_find+0xa0>
		if (res != FR_OK) break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005ce8:	bf00      	nop

	return res;
 8005cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005d02:	2101      	movs	r1, #1
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff ff1a 	bl	8005b3e <dir_alloc>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d11c      	bne.n	8005d4e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	4619      	mov	r1, r3
 8005d1a:	68b8      	ldr	r0, [r7, #8]
 8005d1c:	f7ff f9ce 	bl	80050bc <move_window>
 8005d20:	4603      	mov	r3, r0
 8005d22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d111      	bne.n	8005d4e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe ffb5 	bl	8004ca2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a18      	ldr	r0, [r3, #32]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3324      	adds	r3, #36	; 0x24
 8005d40:	220b      	movs	r2, #11
 8005d42:	4619      	mov	r1, r3
 8005d44:	f7fe ff8c 	bl	8004c60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2200      	movs	r2, #0
 8005d66:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d04e      	beq.n	8005e0e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8005d78:	e021      	b.n	8005dbe <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1a      	ldr	r2, [r3, #32]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	1c59      	adds	r1, r3, #1
 8005d82:	6179      	str	r1, [r7, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d100      	bne.n	8005d92 <get_fileinfo+0x3a>
 8005d90:	e015      	b.n	8005dbe <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2b05      	cmp	r3, #5
 8005d96:	d101      	bne.n	8005d9c <get_fileinfo+0x44>
 8005d98:	23e5      	movs	r3, #229	; 0xe5
 8005d9a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b09      	cmp	r3, #9
 8005da0:	d106      	bne.n	8005db0 <get_fileinfo+0x58>
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1c5a      	adds	r2, r3, #1
 8005da6:	613a      	str	r2, [r7, #16]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	4413      	add	r3, r2
 8005dac:	222e      	movs	r2, #46	; 0x2e
 8005dae:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	613a      	str	r2, [r7, #16]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	4413      	add	r3, r2
 8005dba:	7bfa      	ldrb	r2, [r7, #15]
 8005dbc:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2b0a      	cmp	r3, #10
 8005dc2:	d9da      	bls.n	8005d7a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	4413      	add	r3, r2
 8005dca:	3309      	adds	r3, #9
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	7ada      	ldrb	r2, [r3, #11]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	331c      	adds	r3, #28
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fed3 	bl	8004b8c <ld_dword>
 8005de6:	4602      	mov	r2, r0
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	3316      	adds	r3, #22
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe feca 	bl	8004b8c <ld_dword>
 8005df8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	80da      	strh	r2, [r3, #6]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	0c1b      	lsrs	r3, r3, #16
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	809a      	strh	r2, [r3, #4]
 8005e0c:	e000      	b.n	8005e10 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8005e0e:	bf00      	nop
}
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
	...

08005e18 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3324      	adds	r3, #36	; 0x24
 8005e2c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005e2e:	220b      	movs	r2, #11
 8005e30:	2120      	movs	r1, #32
 8005e32:	68b8      	ldr	r0, [r7, #8]
 8005e34:	f7fe ff35 	bl	8004ca2 <mem_set>
	si = i = 0; ni = 8;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	2308      	movs	r3, #8
 8005e42:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	61fa      	str	r2, [r7, #28]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005e52:	7efb      	ldrb	r3, [r7, #27]
 8005e54:	2b20      	cmp	r3, #32
 8005e56:	d94e      	bls.n	8005ef6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005e58:	7efb      	ldrb	r3, [r7, #27]
 8005e5a:	2b2f      	cmp	r3, #47	; 0x2f
 8005e5c:	d006      	beq.n	8005e6c <create_name+0x54>
 8005e5e:	7efb      	ldrb	r3, [r7, #27]
 8005e60:	2b5c      	cmp	r3, #92	; 0x5c
 8005e62:	d110      	bne.n	8005e86 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005e64:	e002      	b.n	8005e6c <create_name+0x54>
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b2f      	cmp	r3, #47	; 0x2f
 8005e76:	d0f6      	beq.n	8005e66 <create_name+0x4e>
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b5c      	cmp	r3, #92	; 0x5c
 8005e82:	d0f0      	beq.n	8005e66 <create_name+0x4e>
			break;
 8005e84:	e038      	b.n	8005ef8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005e86:	7efb      	ldrb	r3, [r7, #27]
 8005e88:	2b2e      	cmp	r3, #46	; 0x2e
 8005e8a:	d003      	beq.n	8005e94 <create_name+0x7c>
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d30c      	bcc.n	8005eae <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b0b      	cmp	r3, #11
 8005e98:	d002      	beq.n	8005ea0 <create_name+0x88>
 8005e9a:	7efb      	ldrb	r3, [r7, #27]
 8005e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e9e:	d001      	beq.n	8005ea4 <create_name+0x8c>
 8005ea0:	2306      	movs	r3, #6
 8005ea2:	e044      	b.n	8005f2e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	613b      	str	r3, [r7, #16]
 8005ea8:	230b      	movs	r3, #11
 8005eaa:	617b      	str	r3, [r7, #20]
			continue;
 8005eac:	e022      	b.n	8005ef4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005eae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da04      	bge.n	8005ec0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005eb6:	7efb      	ldrb	r3, [r7, #27]
 8005eb8:	3b80      	subs	r3, #128	; 0x80
 8005eba:	4a1f      	ldr	r2, [pc, #124]	; (8005f38 <create_name+0x120>)
 8005ebc:	5cd3      	ldrb	r3, [r2, r3]
 8005ebe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005ec0:	7efb      	ldrb	r3, [r7, #27]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	481d      	ldr	r0, [pc, #116]	; (8005f3c <create_name+0x124>)
 8005ec6:	f7fe ff2e 	bl	8004d26 <chk_chr>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <create_name+0xbc>
 8005ed0:	2306      	movs	r3, #6
 8005ed2:	e02c      	b.n	8005f2e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005ed4:	7efb      	ldrb	r3, [r7, #27]
 8005ed6:	2b60      	cmp	r3, #96	; 0x60
 8005ed8:	d905      	bls.n	8005ee6 <create_name+0xce>
 8005eda:	7efb      	ldrb	r3, [r7, #27]
 8005edc:	2b7a      	cmp	r3, #122	; 0x7a
 8005ede:	d802      	bhi.n	8005ee6 <create_name+0xce>
 8005ee0:	7efb      	ldrb	r3, [r7, #27]
 8005ee2:	3b20      	subs	r3, #32
 8005ee4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	613a      	str	r2, [r7, #16]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	4413      	add	r3, r2
 8005ef0:	7efa      	ldrb	r2, [r7, #27]
 8005ef2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005ef4:	e7a6      	b.n	8005e44 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005ef6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	441a      	add	r2, r3
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <create_name+0xf4>
 8005f08:	2306      	movs	r3, #6
 8005f0a:	e010      	b.n	8005f2e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2be5      	cmp	r3, #229	; 0xe5
 8005f12:	d102      	bne.n	8005f1a <create_name+0x102>
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2205      	movs	r2, #5
 8005f18:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005f1a:	7efb      	ldrb	r3, [r7, #27]
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d801      	bhi.n	8005f24 <create_name+0x10c>
 8005f20:	2204      	movs	r2, #4
 8005f22:	e000      	b.n	8005f26 <create_name+0x10e>
 8005f24:	2200      	movs	r2, #0
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	330b      	adds	r3, #11
 8005f2a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005f2c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3720      	adds	r7, #32
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	080087e4 	.word	0x080087e4
 8005f3c:	080072ac 	.word	0x080072ac

08005f40 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005f54:	e002      	b.n	8005f5c <follow_path+0x1c>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b2f      	cmp	r3, #47	; 0x2f
 8005f62:	d0f8      	beq.n	8005f56 <follow_path+0x16>
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b5c      	cmp	r3, #92	; 0x5c
 8005f6a:	d0f4      	beq.n	8005f56 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b1f      	cmp	r3, #31
 8005f78:	d80a      	bhi.n	8005f90 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2280      	movs	r2, #128	; 0x80
 8005f7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005f82:	2100      	movs	r1, #0
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fc7b 	bl	8005880 <dir_sdi>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	75fb      	strb	r3, [r7, #23]
 8005f8e:	e048      	b.n	8006022 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005f90:	463b      	mov	r3, r7
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff ff3f 	bl	8005e18 <create_name>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f9e:	7dfb      	ldrb	r3, [r7, #23]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d139      	bne.n	8006018 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fe50 	bl	8005c4a <dir_find>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005fb4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005fb6:	7dfb      	ldrb	r3, [r7, #23]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	d12c      	bne.n	800601c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005fc2:	7afb      	ldrb	r3, [r7, #11]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d127      	bne.n	800601c <follow_path+0xdc>
 8005fcc:	2305      	movs	r3, #5
 8005fce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005fd0:	e024      	b.n	800601c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d121      	bne.n	8006020 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	799b      	ldrb	r3, [r3, #6]
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005fe8:	2305      	movs	r3, #5
 8005fea:	75fb      	strb	r3, [r7, #23]
 8005fec:	e019      	b.n	8006022 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	8992      	ldrh	r2, [r2, #12]
 8005ffc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006000:	fb00 f202 	mul.w	r2, r0, r2
 8006004:	1a9b      	subs	r3, r3, r2
 8006006:	440b      	add	r3, r1
 8006008:	4619      	mov	r1, r3
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f7ff fdde 	bl	8005bcc <ld_clust>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006016:	e7bb      	b.n	8005f90 <follow_path+0x50>
			if (res != FR_OK) break;
 8006018:	bf00      	nop
 800601a:	e002      	b.n	8006022 <follow_path+0xe2>
				break;
 800601c:	bf00      	nop
 800601e:	e000      	b.n	8006022 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006020:	bf00      	nop
			}
		}
	}

	return res;
 8006022:	7dfb      	ldrb	r3, [r7, #23]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3718      	adds	r7, #24
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006034:	f04f 33ff 	mov.w	r3, #4294967295
 8006038:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d031      	beq.n	80060a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e002      	b.n	8006050 <get_ldnumber+0x24>
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	3301      	adds	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b20      	cmp	r3, #32
 8006056:	d903      	bls.n	8006060 <get_ldnumber+0x34>
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b3a      	cmp	r3, #58	; 0x3a
 800605e:	d1f4      	bne.n	800604a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b3a      	cmp	r3, #58	; 0x3a
 8006066:	d11c      	bne.n	80060a2 <get_ldnumber+0x76>
			tp = *path;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	60fa      	str	r2, [r7, #12]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	3b30      	subs	r3, #48	; 0x30
 8006078:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b09      	cmp	r3, #9
 800607e:	d80e      	bhi.n	800609e <get_ldnumber+0x72>
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	429a      	cmp	r2, r3
 8006086:	d10a      	bne.n	800609e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d107      	bne.n	800609e <get_ldnumber+0x72>
					vol = (int)i;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	3301      	adds	r3, #1
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	e002      	b.n	80060a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80060a2:	2300      	movs	r3, #0
 80060a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80060a6:	693b      	ldr	r3, [r7, #16]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	371c      	adds	r7, #28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	70da      	strb	r2, [r3, #3]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ca:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fe fff4 	bl	80050bc <move_window>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <check_fs+0x2a>
 80060da:	2304      	movs	r3, #4
 80060dc:	e038      	b.n	8006150 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3334      	adds	r3, #52	; 0x34
 80060e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe fd38 	bl	8004b5c <ld_word>
 80060ec:	4603      	mov	r3, r0
 80060ee:	461a      	mov	r2, r3
 80060f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d001      	beq.n	80060fc <check_fs+0x48>
 80060f8:	2303      	movs	r3, #3
 80060fa:	e029      	b.n	8006150 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006102:	2be9      	cmp	r3, #233	; 0xe9
 8006104:	d009      	beq.n	800611a <check_fs+0x66>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800610c:	2beb      	cmp	r3, #235	; 0xeb
 800610e:	d11e      	bne.n	800614e <check_fs+0x9a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006116:	2b90      	cmp	r3, #144	; 0x90
 8006118:	d119      	bne.n	800614e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3334      	adds	r3, #52	; 0x34
 800611e:	3336      	adds	r3, #54	; 0x36
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe fd33 	bl	8004b8c <ld_dword>
 8006126:	4603      	mov	r3, r0
 8006128:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800612c:	4a0a      	ldr	r2, [pc, #40]	; (8006158 <check_fs+0xa4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d101      	bne.n	8006136 <check_fs+0x82>
 8006132:	2300      	movs	r3, #0
 8006134:	e00c      	b.n	8006150 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3334      	adds	r3, #52	; 0x34
 800613a:	3352      	adds	r3, #82	; 0x52
 800613c:	4618      	mov	r0, r3
 800613e:	f7fe fd25 	bl	8004b8c <ld_dword>
 8006142:	4603      	mov	r3, r0
 8006144:	4a05      	ldr	r2, [pc, #20]	; (800615c <check_fs+0xa8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <check_fs+0x9a>
 800614a:	2300      	movs	r3, #0
 800614c:	e000      	b.n	8006150 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800614e:	2302      	movs	r3, #2
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	00544146 	.word	0x00544146
 800615c:	33544146 	.word	0x33544146

08006160 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b096      	sub	sp, #88	; 0x58
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7ff ff59 	bl	800602c <get_ldnumber>
 800617a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800617c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617e:	2b00      	cmp	r3, #0
 8006180:	da01      	bge.n	8006186 <find_volume+0x26>
 8006182:	230b      	movs	r3, #11
 8006184:	e262      	b.n	800664c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006186:	4a9f      	ldr	r2, [pc, #636]	; (8006404 <find_volume+0x2a4>)
 8006188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800618a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800618e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <find_volume+0x3a>
 8006196:	230c      	movs	r3, #12
 8006198:	e258      	b.n	800664c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d01a      	beq.n	80061e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe fc33 	bl	8004a20 <disk_status>
 80061ba:	4603      	mov	r3, r0
 80061bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80061c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10c      	bne.n	80061e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <find_volume+0x82>
 80061d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061d6:	f003 0304 	and.w	r3, r3, #4
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80061de:	230a      	movs	r3, #10
 80061e0:	e234      	b.n	800664c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 80061e2:	2300      	movs	r3, #0
 80061e4:	e232      	b.n	800664c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80061ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80061f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fc2b 	bl	8004a54 <disk_initialize>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006204:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006210:	2303      	movs	r3, #3
 8006212:	e21b      	b.n	800664c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <find_volume+0xca>
 800621a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006226:	230a      	movs	r3, #10
 8006228:	e210      	b.n	800664c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	7858      	ldrb	r0, [r3, #1]
 800622e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006230:	330c      	adds	r3, #12
 8006232:	461a      	mov	r2, r3
 8006234:	2102      	movs	r1, #2
 8006236:	f7fe fc73 	bl	8004b20 <disk_ioctl>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <find_volume+0xe4>
 8006240:	2301      	movs	r3, #1
 8006242:	e203      	b.n	800664c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006246:	899b      	ldrh	r3, [r3, #12]
 8006248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624c:	d80d      	bhi.n	800626a <find_volume+0x10a>
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	899b      	ldrh	r3, [r3, #12]
 8006252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006256:	d308      	bcc.n	800626a <find_volume+0x10a>
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	899b      	ldrh	r3, [r3, #12]
 800625c:	461a      	mov	r2, r3
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	899b      	ldrh	r3, [r3, #12]
 8006262:	3b01      	subs	r3, #1
 8006264:	4013      	ands	r3, r2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d001      	beq.n	800626e <find_volume+0x10e>
 800626a:	2301      	movs	r3, #1
 800626c:	e1ee      	b.n	800664c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006272:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006274:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006276:	f7ff ff1d 	bl	80060b4 <check_fs>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006284:	2b02      	cmp	r3, #2
 8006286:	d149      	bne.n	800631c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006288:	2300      	movs	r3, #0
 800628a:	643b      	str	r3, [r7, #64]	; 0x40
 800628c:	e01e      	b.n	80062cc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800629c:	4413      	add	r3, r2
 800629e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	3304      	adds	r3, #4
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d006      	beq.n	80062b8 <find_volume+0x158>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	3308      	adds	r3, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fc6c 	bl	8004b8c <ld_dword>
 80062b4:	4602      	mov	r2, r0
 80062b6:	e000      	b.n	80062ba <find_volume+0x15a>
 80062b8:	2200      	movs	r2, #0
 80062ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	3358      	adds	r3, #88	; 0x58
 80062c0:	443b      	add	r3, r7
 80062c2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80062c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062c8:	3301      	adds	r3, #1
 80062ca:	643b      	str	r3, [r7, #64]	; 0x40
 80062cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ce:	2b03      	cmp	r3, #3
 80062d0:	d9dd      	bls.n	800628e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80062d2:	2300      	movs	r3, #0
 80062d4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80062d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <find_volume+0x182>
 80062dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062de:	3b01      	subs	r3, #1
 80062e0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80062e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	3358      	adds	r3, #88	; 0x58
 80062e8:	443b      	add	r3, r7
 80062ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80062ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80062f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <find_volume+0x1a2>
 80062f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80062f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062fa:	f7ff fedb 	bl	80060b4 <check_fs>
 80062fe:	4603      	mov	r3, r0
 8006300:	e000      	b.n	8006304 <find_volume+0x1a4>
 8006302:	2303      	movs	r3, #3
 8006304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800630c:	2b01      	cmp	r3, #1
 800630e:	d905      	bls.n	800631c <find_volume+0x1bc>
 8006310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006312:	3301      	adds	r3, #1
 8006314:	643b      	str	r3, [r7, #64]	; 0x40
 8006316:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006318:	2b03      	cmp	r3, #3
 800631a:	d9e2      	bls.n	80062e2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800631c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006320:	2b04      	cmp	r3, #4
 8006322:	d101      	bne.n	8006328 <find_volume+0x1c8>
 8006324:	2301      	movs	r3, #1
 8006326:	e191      	b.n	800664c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006328:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800632c:	2b01      	cmp	r3, #1
 800632e:	d901      	bls.n	8006334 <find_volume+0x1d4>
 8006330:	230d      	movs	r3, #13
 8006332:	e18b      	b.n	800664c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	3334      	adds	r3, #52	; 0x34
 8006338:	330b      	adds	r3, #11
 800633a:	4618      	mov	r0, r3
 800633c:	f7fe fc0e 	bl	8004b5c <ld_word>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006346:	899b      	ldrh	r3, [r3, #12]
 8006348:	429a      	cmp	r2, r3
 800634a:	d001      	beq.n	8006350 <find_volume+0x1f0>
 800634c:	230d      	movs	r3, #13
 800634e:	e17d      	b.n	800664c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006352:	3334      	adds	r3, #52	; 0x34
 8006354:	3316      	adds	r3, #22
 8006356:	4618      	mov	r0, r3
 8006358:	f7fe fc00 	bl	8004b5c <ld_word>
 800635c:	4603      	mov	r3, r0
 800635e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <find_volume+0x214>
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006368:	3334      	adds	r3, #52	; 0x34
 800636a:	3324      	adds	r3, #36	; 0x24
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fc0d 	bl	8004b8c <ld_dword>
 8006372:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006378:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006386:	789b      	ldrb	r3, [r3, #2]
 8006388:	2b01      	cmp	r3, #1
 800638a:	d005      	beq.n	8006398 <find_volume+0x238>
 800638c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638e:	789b      	ldrb	r3, [r3, #2]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d001      	beq.n	8006398 <find_volume+0x238>
 8006394:	230d      	movs	r3, #13
 8006396:	e159      	b.n	800664c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	789b      	ldrb	r3, [r3, #2]
 800639c:	461a      	mov	r2, r3
 800639e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a0:	fb02 f303 	mul.w	r3, r2, r3
 80063a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80063b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b4:	895b      	ldrh	r3, [r3, #10]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d008      	beq.n	80063cc <find_volume+0x26c>
 80063ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063bc:	895b      	ldrh	r3, [r3, #10]
 80063be:	461a      	mov	r2, r3
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	895b      	ldrh	r3, [r3, #10]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <find_volume+0x270>
 80063cc:	230d      	movs	r3, #13
 80063ce:	e13d      	b.n	800664c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80063d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d2:	3334      	adds	r3, #52	; 0x34
 80063d4:	3311      	adds	r3, #17
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fbc0 	bl	8004b5c <ld_word>
 80063dc:	4603      	mov	r3, r0
 80063de:	461a      	mov	r2, r3
 80063e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80063e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e6:	891b      	ldrh	r3, [r3, #8]
 80063e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063ea:	8992      	ldrh	r2, [r2, #12]
 80063ec:	0952      	lsrs	r2, r2, #5
 80063ee:	b292      	uxth	r2, r2
 80063f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80063f4:	fb01 f202 	mul.w	r2, r1, r2
 80063f8:	1a9b      	subs	r3, r3, r2
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <find_volume+0x2a8>
 8006400:	230d      	movs	r3, #13
 8006402:	e123      	b.n	800664c <find_volume+0x4ec>
 8006404:	200001e8 	.word	0x200001e8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640a:	3334      	adds	r3, #52	; 0x34
 800640c:	3313      	adds	r3, #19
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fba4 	bl	8004b5c <ld_word>
 8006414:	4603      	mov	r3, r0
 8006416:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <find_volume+0x2cc>
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	3334      	adds	r3, #52	; 0x34
 8006422:	3320      	adds	r3, #32
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fbb1 	bl	8004b8c <ld_dword>
 800642a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800642c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642e:	3334      	adds	r3, #52	; 0x34
 8006430:	330e      	adds	r3, #14
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe fb92 	bl	8004b5c <ld_word>
 8006438:	4603      	mov	r3, r0
 800643a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800643c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <find_volume+0x2e6>
 8006442:	230d      	movs	r3, #13
 8006444:	e102      	b.n	800664c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006446:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800644a:	4413      	add	r3, r2
 800644c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800644e:	8911      	ldrh	r1, [r2, #8]
 8006450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006452:	8992      	ldrh	r2, [r2, #12]
 8006454:	0952      	lsrs	r2, r2, #5
 8006456:	b292      	uxth	r2, r2
 8006458:	fbb1 f2f2 	udiv	r2, r1, r2
 800645c:	b292      	uxth	r2, r2
 800645e:	4413      	add	r3, r2
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006466:	429a      	cmp	r2, r3
 8006468:	d201      	bcs.n	800646e <find_volume+0x30e>
 800646a:	230d      	movs	r3, #13
 800646c:	e0ee      	b.n	800664c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800646e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006476:	8952      	ldrh	r2, [r2, #10]
 8006478:	fbb3 f3f2 	udiv	r3, r3, r2
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <find_volume+0x328>
 8006484:	230d      	movs	r3, #13
 8006486:	e0e1      	b.n	800664c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006488:	2303      	movs	r3, #3
 800648a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006494:	4293      	cmp	r3, r2
 8006496:	d802      	bhi.n	800649e <find_volume+0x33e>
 8006498:	2302      	movs	r3, #2
 800649a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d802      	bhi.n	80064ae <find_volume+0x34e>
 80064a8:	2301      	movs	r3, #1
 80064aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1c9a      	adds	r2, r3, #2
 80064b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80064b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064ba:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80064bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80064be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c0:	441a      	add	r2, r3
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80064c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	441a      	add	r2, r3
 80064cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ce:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80064d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d11e      	bne.n	8006516 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80064d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064da:	3334      	adds	r3, #52	; 0x34
 80064dc:	332a      	adds	r3, #42	; 0x2a
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fb3c 	bl	8004b5c <ld_word>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <find_volume+0x38e>
 80064ea:	230d      	movs	r3, #13
 80064ec:	e0ae      	b.n	800664c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	891b      	ldrh	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <find_volume+0x39a>
 80064f6:	230d      	movs	r3, #13
 80064f8:	e0a8      	b.n	800664c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	3334      	adds	r3, #52	; 0x34
 80064fe:	332c      	adds	r3, #44	; 0x2c
 8006500:	4618      	mov	r0, r3
 8006502:	f7fe fb43 	bl	8004b8c <ld_dword>
 8006506:	4602      	mov	r2, r0
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
 8006514:	e01f      	b.n	8006556 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006518:	891b      	ldrh	r3, [r3, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <find_volume+0x3c2>
 800651e:	230d      	movs	r3, #13
 8006520:	e094      	b.n	800664c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006528:	441a      	add	r2, r3
 800652a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800652e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006532:	2b02      	cmp	r3, #2
 8006534:	d103      	bne.n	800653e <find_volume+0x3de>
 8006536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	e00a      	b.n	8006554 <find_volume+0x3f4>
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	4613      	mov	r3, r2
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	4413      	add	r3, r2
 8006548:	085a      	lsrs	r2, r3, #1
 800654a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006554:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006558:	69da      	ldr	r2, [r3, #28]
 800655a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655c:	899b      	ldrh	r3, [r3, #12]
 800655e:	4619      	mov	r1, r3
 8006560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006562:	440b      	add	r3, r1
 8006564:	3b01      	subs	r3, #1
 8006566:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006568:	8989      	ldrh	r1, [r1, #12]
 800656a:	fbb3 f3f1 	udiv	r3, r3, r1
 800656e:	429a      	cmp	r2, r3
 8006570:	d201      	bcs.n	8006576 <find_volume+0x416>
 8006572:	230d      	movs	r3, #13
 8006574:	e06a      	b.n	800664c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	615a      	str	r2, [r3, #20]
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	695a      	ldr	r2, [r3, #20]
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006588:	2280      	movs	r2, #128	; 0x80
 800658a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800658c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006590:	2b03      	cmp	r3, #3
 8006592:	d149      	bne.n	8006628 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	3334      	adds	r3, #52	; 0x34
 8006598:	3330      	adds	r3, #48	; 0x30
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe fade 	bl	8004b5c <ld_word>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d140      	bne.n	8006628 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80065a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a8:	3301      	adds	r3, #1
 80065aa:	4619      	mov	r1, r3
 80065ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065ae:	f7fe fd85 	bl	80050bc <move_window>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d137      	bne.n	8006628 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2200      	movs	r2, #0
 80065bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80065be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c0:	3334      	adds	r3, #52	; 0x34
 80065c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe fac8 	bl	8004b5c <ld_word>
 80065cc:	4603      	mov	r3, r0
 80065ce:	461a      	mov	r2, r3
 80065d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d127      	bne.n	8006628 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	3334      	adds	r3, #52	; 0x34
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe fad5 	bl	8004b8c <ld_dword>
 80065e2:	4603      	mov	r3, r0
 80065e4:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <find_volume+0x4f4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d11e      	bne.n	8006628 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	3334      	adds	r3, #52	; 0x34
 80065ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe faca 	bl	8004b8c <ld_dword>
 80065f8:	4603      	mov	r3, r0
 80065fa:	4a17      	ldr	r2, [pc, #92]	; (8006658 <find_volume+0x4f8>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d113      	bne.n	8006628 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006602:	3334      	adds	r3, #52	; 0x34
 8006604:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006608:	4618      	mov	r0, r3
 800660a:	f7fe fabf 	bl	8004b8c <ld_dword>
 800660e:	4602      	mov	r2, r0
 8006610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006612:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	3334      	adds	r3, #52	; 0x34
 8006618:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800661c:	4618      	mov	r0, r3
 800661e:	f7fe fab5 	bl	8004b8c <ld_dword>
 8006622:	4602      	mov	r2, r0
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800662e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <find_volume+0x4fc>)
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	b29a      	uxth	r2, r3
 8006638:	4b08      	ldr	r3, [pc, #32]	; (800665c <find_volume+0x4fc>)
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	4b07      	ldr	r3, [pc, #28]	; (800665c <find_volume+0x4fc>)
 800663e:	881a      	ldrh	r2, [r3, #0]
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006646:	f7fe fcd1 	bl	8004fec <clear_lock>
#endif
	return FR_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3758      	adds	r7, #88	; 0x58
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	41615252 	.word	0x41615252
 8006658:	61417272 	.word	0x61417272
 800665c:	200001ec 	.word	0x200001ec

08006660 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800666a:	2309      	movs	r3, #9
 800666c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01c      	beq.n	80066ae <validate+0x4e>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d018      	beq.n	80066ae <validate+0x4e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d013      	beq.n	80066ae <validate+0x4e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	889a      	ldrh	r2, [r3, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	88db      	ldrh	r3, [r3, #6]
 8006690:	429a      	cmp	r2, r3
 8006692:	d10c      	bne.n	80066ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	785b      	ldrb	r3, [r3, #1]
 800669a:	4618      	mov	r0, r3
 800669c:	f7fe f9c0 	bl	8004a20 <disk_status>
 80066a0:	4603      	mov	r3, r0
 80066a2:	f003 0301 	and.w	r3, r3, #1
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <validate+0x4e>
			res = FR_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d102      	bne.n	80066ba <validate+0x5a>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	e000      	b.n	80066bc <validate+0x5c>
 80066ba:	2300      	movs	r3, #0
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	6013      	str	r3, [r2, #0]
	return res;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	4613      	mov	r3, r2
 80066d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80066de:	f107 0310 	add.w	r3, r7, #16
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff fca2 	bl	800602c <get_ldnumber>
 80066e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	da01      	bge.n	80066f4 <f_mount+0x28>
 80066f0:	230b      	movs	r3, #11
 80066f2:	e02b      	b.n	800674c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80066f4:	4a17      	ldr	r2, [pc, #92]	; (8006754 <f_mount+0x88>)
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006704:	69b8      	ldr	r0, [r7, #24]
 8006706:	f7fe fc71 	bl	8004fec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	2200      	movs	r2, #0
 800670e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d002      	beq.n	800671c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	490d      	ldr	r1, [pc, #52]	; (8006754 <f_mount+0x88>)
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <f_mount+0x66>
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d001      	beq.n	8006736 <f_mount+0x6a>
 8006732:	2300      	movs	r3, #0
 8006734:	e00a      	b.n	800674c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006736:	f107 010c 	add.w	r1, r7, #12
 800673a:	f107 0308 	add.w	r3, r7, #8
 800673e:	2200      	movs	r2, #0
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff fd0d 	bl	8006160 <find_volume>
 8006746:	4603      	mov	r3, r0
 8006748:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800674a:	7dfb      	ldrb	r3, [r7, #23]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3720      	adds	r7, #32
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	200001e8 	.word	0x200001e8

08006758 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b098      	sub	sp, #96	; 0x60
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <f_open+0x18>
 800676c:	2309      	movs	r3, #9
 800676e:	e1bb      	b.n	8006ae8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006776:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006778:	79fa      	ldrb	r2, [r7, #7]
 800677a:	f107 0110 	add.w	r1, r7, #16
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff fcec 	bl	8006160 <find_volume>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800678e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006792:	2b00      	cmp	r3, #0
 8006794:	f040 819f 	bne.w	8006ad6 <f_open+0x37e>
		dj.obj.fs = fs;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	f107 0314 	add.w	r3, r7, #20
 80067a2:	4611      	mov	r1, r2
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff fbcb 	bl	8005f40 <follow_path>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80067b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d11a      	bne.n	80067ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80067b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	da03      	bge.n	80067ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80067c2:	2306      	movs	r3, #6
 80067c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80067c8:	e011      	b.n	80067ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	f023 0301 	bic.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	bf14      	ite	ne
 80067d4:	2301      	movne	r3, #1
 80067d6:	2300      	moveq	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	f107 0314 	add.w	r3, r7, #20
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe faba 	bl	8004d5c <chk_lock>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80067ee:	79fb      	ldrb	r3, [r7, #7]
 80067f0:	f003 031c 	and.w	r3, r3, #28
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d07f      	beq.n	80068f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80067f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d017      	beq.n	8006830 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006804:	2b04      	cmp	r3, #4
 8006806:	d10e      	bne.n	8006826 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006808:	f7fe fb04 	bl	8004e14 <enq_lock>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d006      	beq.n	8006820 <f_open+0xc8>
 8006812:	f107 0314 	add.w	r3, r7, #20
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fa6c 	bl	8005cf4 <dir_register>
 800681c:	4603      	mov	r3, r0
 800681e:	e000      	b.n	8006822 <f_open+0xca>
 8006820:	2312      	movs	r3, #18
 8006822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	f043 0308 	orr.w	r3, r3, #8
 800682c:	71fb      	strb	r3, [r7, #7]
 800682e:	e010      	b.n	8006852 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006830:	7ebb      	ldrb	r3, [r7, #26]
 8006832:	f003 0311 	and.w	r3, r3, #17
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <f_open+0xea>
					res = FR_DENIED;
 800683a:	2307      	movs	r3, #7
 800683c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006840:	e007      	b.n	8006852 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <f_open+0xfa>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006856:	2b00      	cmp	r3, #0
 8006858:	d168      	bne.n	800692c <f_open+0x1d4>
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d063      	beq.n	800692c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006864:	f7fd fc26 	bl	80040b4 <get_fattime>
 8006868:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	330e      	adds	r3, #14
 800686e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe f9c9 	bl	8004c08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006878:	3316      	adds	r3, #22
 800687a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800687c:	4618      	mov	r0, r3
 800687e:	f7fe f9c3 	bl	8004c08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	330b      	adds	r3, #11
 8006886:	2220      	movs	r2, #32
 8006888:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800688e:	4611      	mov	r1, r2
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff f99b 	bl	8005bcc <ld_clust>
 8006896:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800689c:	2200      	movs	r2, #0
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff f9b3 	bl	8005c0a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80068a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a6:	331c      	adds	r3, #28
 80068a8:	2100      	movs	r1, #0
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fe f9ac 	bl	8004c08 <st_dword>
					fs->wflag = 1;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	2201      	movs	r2, #1
 80068b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80068b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d037      	beq.n	800692c <f_open+0x1d4>
						dw = fs->winsect;
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80068c2:	f107 0314 	add.w	r3, r7, #20
 80068c6:	2200      	movs	r2, #0
 80068c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fea3 	bl	8005616 <remove_chain>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80068d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d126      	bne.n	800692c <f_open+0x1d4>
							res = move_window(fs, dw);
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fe fbea 	bl	80050bc <move_window>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068f2:	3a01      	subs	r2, #1
 80068f4:	611a      	str	r2, [r3, #16]
 80068f6:	e019      	b.n	800692c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80068f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d115      	bne.n	800692c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006900:	7ebb      	ldrb	r3, [r7, #26]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <f_open+0x1ba>
					res = FR_NO_FILE;
 800690a:	2304      	movs	r3, #4
 800690c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006910:	e00c      	b.n	800692c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006912:	79fb      	ldrb	r3, [r7, #7]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d007      	beq.n	800692c <f_open+0x1d4>
 800691c:	7ebb      	ldrb	r3, [r7, #26]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <f_open+0x1d4>
						res = FR_DENIED;
 8006926:	2307      	movs	r3, #7
 8006928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800692c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006930:	2b00      	cmp	r3, #0
 8006932:	d128      	bne.n	8006986 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006944:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800694e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	f023 0301 	bic.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	bf14      	ite	ne
 800695e:	2301      	movne	r3, #1
 8006960:	2300      	moveq	r3, #0
 8006962:	b2db      	uxtb	r3, r3
 8006964:	461a      	mov	r2, r3
 8006966:	f107 0314 	add.w	r3, r7, #20
 800696a:	4611      	mov	r1, r2
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fa73 	bl	8004e58 <inc_lock>
 8006972:	4602      	mov	r2, r0
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <f_open+0x22e>
 8006980:	2302      	movs	r3, #2
 8006982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 80a3 	bne.w	8006ad6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006994:	4611      	mov	r1, r2
 8006996:	4618      	mov	r0, r3
 8006998:	f7ff f918 	bl	8005bcc <ld_clust>
 800699c:	4602      	mov	r2, r0
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80069a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a4:	331c      	adds	r3, #28
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe f8f0 	bl	8004b8c <ld_dword>
 80069ac:	4602      	mov	r2, r0
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	88da      	ldrh	r2, [r3, #6]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	79fa      	ldrb	r2, [r7, #7]
 80069ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3330      	adds	r3, #48	; 0x30
 80069e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe f95a 	bl	8004ca2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d06e      	beq.n	8006ad6 <f_open+0x37e>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d06a      	beq.n	8006ad6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	895b      	ldrh	r3, [r3, #10]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	899b      	ldrh	r3, [r3, #12]
 8006a12:	fb02 f303 	mul.w	r3, r2, r3
 8006a16:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	657b      	str	r3, [r7, #84]	; 0x54
 8006a24:	e016      	b.n	8006a54 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fc03 	bl	8005236 <get_fat>
 8006a30:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d802      	bhi.n	8006a3e <f_open+0x2e6>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d102      	bne.n	8006a4c <f_open+0x2f4>
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006a4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	657b      	str	r3, [r7, #84]	; 0x54
 8006a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <f_open+0x30c>
 8006a5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d8e0      	bhi.n	8006a26 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d131      	bne.n	8006ad6 <f_open+0x37e>
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	899b      	ldrh	r3, [r3, #12]
 8006a76:	461a      	mov	r2, r3
 8006a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a7e:	fb01 f202 	mul.w	r2, r1, r2
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d026      	beq.n	8006ad6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7fe fbb3 	bl	80051f8 <clust2sect>
 8006a92:	6478      	str	r0, [r7, #68]	; 0x44
 8006a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <f_open+0x34a>
						res = FR_INT_ERR;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006aa0:	e019      	b.n	8006ad6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	899b      	ldrh	r3, [r3, #12]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ab0:	441a      	add	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	7858      	ldrb	r0, [r3, #1]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a1a      	ldr	r2, [r3, #32]
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f7fd ffeb 	bl	8004aa0 <disk_read>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <f_open+0x37e>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <f_open+0x38c>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3760      	adds	r7, #96	; 0x60
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08e      	sub	sp, #56	; 0x38
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2200      	movs	r2, #0
 8006b06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f107 0214 	add.w	r2, r7, #20
 8006b0e:	4611      	mov	r1, r2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7ff fda5 	bl	8006660 <validate>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d107      	bne.n	8006b34 <f_read+0x44>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	7d5b      	ldrb	r3, [r3, #21]
 8006b28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <f_read+0x4a>
 8006b34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b38:	e135      	b.n	8006da6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	7d1b      	ldrb	r3, [r3, #20]
 8006b3e:	f003 0301 	and.w	r3, r3, #1
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <f_read+0x5a>
 8006b46:	2307      	movs	r3, #7
 8006b48:	e12d      	b.n	8006da6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68da      	ldr	r2, [r3, #12]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	699b      	ldr	r3, [r3, #24]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	f240 811e 	bls.w	8006d9c <f_read+0x2ac>
 8006b60:	6a3b      	ldr	r3, [r7, #32]
 8006b62:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006b64:	e11a      	b.n	8006d9c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	8992      	ldrh	r2, [r2, #12]
 8006b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b72:	fb01 f202 	mul.w	r2, r1, r2
 8006b76:	1a9b      	subs	r3, r3, r2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f040 80d5 	bne.w	8006d28 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	8992      	ldrh	r2, [r2, #12]
 8006b86:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	8952      	ldrh	r2, [r2, #10]
 8006b8e:	3a01      	subs	r2, #1
 8006b90:	4013      	ands	r3, r2
 8006b92:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d12f      	bne.n	8006bfa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ba8:	e013      	b.n	8006bd2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d007      	beq.n	8006bc2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7fe fe29 	bl	8005810 <clmt_clust>
 8006bbe:	6338      	str	r0, [r7, #48]	; 0x30
 8006bc0:	e007      	b.n	8006bd2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f7fe fb33 	bl	8005236 <get_fat>
 8006bd0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d804      	bhi.n	8006be2 <f_read+0xf2>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	755a      	strb	r2, [r3, #21]
 8006bde:	2302      	movs	r3, #2
 8006be0:	e0e1      	b.n	8006da6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d104      	bne.n	8006bf4 <f_read+0x104>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2201      	movs	r2, #1
 8006bee:	755a      	strb	r2, [r3, #21]
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0d8      	b.n	8006da6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	4619      	mov	r1, r3
 8006c02:	4610      	mov	r0, r2
 8006c04:	f7fe faf8 	bl	80051f8 <clust2sect>
 8006c08:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <f_read+0x12a>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2202      	movs	r2, #2
 8006c14:	755a      	strb	r2, [r3, #21]
 8006c16:	2302      	movs	r3, #2
 8006c18:	e0c5      	b.n	8006da6 <f_read+0x2b6>
			sect += csect;
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	4413      	add	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	899b      	ldrh	r3, [r3, #12]
 8006c26:	461a      	mov	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c2e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d041      	beq.n	8006cba <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006c36:	69fa      	ldr	r2, [r7, #28]
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3a:	4413      	add	r3, r2
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	8952      	ldrh	r2, [r2, #10]
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d905      	bls.n	8006c50 <f_read+0x160>
					cc = fs->csize - csect;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	895b      	ldrh	r3, [r3, #10]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	7858      	ldrb	r0, [r3, #1]
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c5a:	f7fd ff21 	bl	8004aa0 <disk_read>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d004      	beq.n	8006c6e <f_read+0x17e>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2201      	movs	r2, #1
 8006c68:	755a      	strb	r2, [r3, #21]
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e09b      	b.n	8006da6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	7d1b      	ldrb	r3, [r3, #20]
 8006c72:	b25b      	sxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	da18      	bge.n	8006caa <f_read+0x1ba>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a1a      	ldr	r2, [r3, #32]
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d911      	bls.n	8006caa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a1a      	ldr	r2, [r3, #32]
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	8992      	ldrh	r2, [r2, #12]
 8006c92:	fb02 f303 	mul.w	r3, r2, r3
 8006c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c98:	18d0      	adds	r0, r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	899b      	ldrh	r3, [r3, #12]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f7fd ffdb 	bl	8004c60 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	899b      	ldrh	r3, [r3, #12]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	fb02 f303 	mul.w	r3, r2, r3
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8006cb8:	e05c      	b.n	8006d74 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d02e      	beq.n	8006d22 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	7d1b      	ldrb	r3, [r3, #20]
 8006cc8:	b25b      	sxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da18      	bge.n	8006d00 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	7858      	ldrb	r0, [r3, #1]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6a1a      	ldr	r2, [r3, #32]
 8006cdc:	2301      	movs	r3, #1
 8006cde:	f7fd feff 	bl	8004ae0 <disk_write>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <f_read+0x202>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2201      	movs	r2, #1
 8006cec:	755a      	strb	r2, [r3, #21]
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e059      	b.n	8006da6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	7d1b      	ldrb	r3, [r3, #20]
 8006cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	7858      	ldrb	r0, [r3, #1]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	f7fd fec7 	bl	8004aa0 <disk_read>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d004      	beq.n	8006d22 <f_read+0x232>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	755a      	strb	r2, [r3, #21]
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e041      	b.n	8006da6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	899b      	ldrh	r3, [r3, #12]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	8992      	ldrh	r2, [r2, #12]
 8006d36:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d3a:	fb01 f202 	mul.w	r2, r1, r2
 8006d3e:	1a9b      	subs	r3, r3, r2
 8006d40:	1ac3      	subs	r3, r0, r3
 8006d42:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8006d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d901      	bls.n	8006d50 <f_read+0x260>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	8992      	ldrh	r2, [r2, #12]
 8006d5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d62:	fb00 f202 	mul.w	r2, r0, r2
 8006d66:	1a9b      	subs	r3, r3, r2
 8006d68:	440b      	add	r3, r1
 8006d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d70:	f7fd ff76 	bl	8004c60 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d78:	4413      	add	r3, r2
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	699a      	ldr	r2, [r3, #24]
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	441a      	add	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	619a      	str	r2, [r3, #24]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	441a      	add	r2, r3
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	f47f aee1 	bne.w	8006b66 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3738      	adds	r7, #56	; 0x38
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b086      	sub	sp, #24
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f107 0208 	add.w	r2, r7, #8
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fc4e 	bl	8006660 <validate>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d168      	bne.n	8006ea0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	7d1b      	ldrb	r3, [r3, #20]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d062      	beq.n	8006ea0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7d1b      	ldrb	r3, [r3, #20]
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	da15      	bge.n	8006e10 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	7858      	ldrb	r0, [r3, #1]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a1a      	ldr	r2, [r3, #32]
 8006df2:	2301      	movs	r3, #1
 8006df4:	f7fd fe74 	bl	8004ae0 <disk_write>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <f_sync+0x54>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e04f      	b.n	8006ea2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	7d1b      	ldrb	r3, [r3, #20]
 8006e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006e10:	f7fd f950 	bl	80040b4 <get_fattime>
 8006e14:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4610      	mov	r0, r2
 8006e20:	f7fe f94c 	bl	80050bc <move_window>
 8006e24:	4603      	mov	r3, r0
 8006e26:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d138      	bne.n	8006ea0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e32:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	330b      	adds	r3, #11
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	330b      	adds	r3, #11
 8006e3e:	f042 0220 	orr.w	r2, r2, #32
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6818      	ldr	r0, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	68f9      	ldr	r1, [r7, #12]
 8006e52:	f7fe feda 	bl	8005c0a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f103 021c 	add.w	r2, r3, #28
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4619      	mov	r1, r3
 8006e62:	4610      	mov	r0, r2
 8006e64:	f7fd fed0 	bl	8004c08 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3316      	adds	r3, #22
 8006e6c:	6939      	ldr	r1, [r7, #16]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fd feca 	bl	8004c08 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3312      	adds	r3, #18
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fd fea9 	bl	8004bd2 <st_word>
					fs->wflag = 1;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2201      	movs	r2, #1
 8006e84:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe f945 	bl	8005118 <sync_fs>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	7d1b      	ldrb	r3, [r3, #20]
 8006e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff ff7b 	bl	8006dae <f_sync>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d118      	bne.n	8006ef4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f107 0208 	add.w	r2, r7, #8
 8006ec8:	4611      	mov	r1, r2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7ff fbc8 	bl	8006660 <validate>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10c      	bne.n	8006ef4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe f848 	bl	8004f74 <dec_lock>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b090      	sub	sp, #64	; 0x40
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8006f08:	f107 010c 	add.w	r1, r7, #12
 8006f0c:	1d3b      	adds	r3, r7, #4
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7ff f925 	bl	8006160 <find_volume>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8006f1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d11f      	bne.n	8006f64 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	f107 030c 	add.w	r3, r7, #12
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff f807 	bl	8005f40 <follow_path>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8006f38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d111      	bne.n	8006f64 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8006f40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006f44:	b25b      	sxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	da03      	bge.n	8006f52 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8006f4a:	2306      	movs	r3, #6
 8006f4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006f50:	e008      	b.n	8006f64 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <f_stat+0x66>
 8006f58:	f107 030c 	add.w	r3, r7, #12
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fe fefa 	bl	8005d58 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8006f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3740      	adds	r7, #64	; 0x40
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006f84:	e017      	b.n	8006fb6 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006f86:	f107 0310 	add.w	r3, r7, #16
 8006f8a:	f107 0114 	add.w	r1, r7, #20
 8006f8e:	2201      	movs	r2, #1
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff fdad 	bl	8006af0 <f_read>
		if (rc != 1) break;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d112      	bne.n	8006fc2 <f_gets+0x52>
		c = s[0];
 8006f9c:	7d3b      	ldrb	r3, [r7, #20]
 8006f9e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	61ba      	str	r2, [r7, #24]
 8006fa6:	7dfa      	ldrb	r2, [r7, #23]
 8006fa8:	701a      	strb	r2, [r3, #0]
		n++;
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	3301      	adds	r3, #1
 8006fae:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	2b0a      	cmp	r3, #10
 8006fb4:	d007      	beq.n	8006fc6 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	69fa      	ldr	r2, [r7, #28]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	dbe2      	blt.n	8006f86 <f_gets+0x16>
 8006fc0:	e002      	b.n	8006fc8 <f_gets+0x58>
		if (rc != 1) break;
 8006fc2:	bf00      	nop
 8006fc4:	e000      	b.n	8006fc8 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8006fc6:	bf00      	nop
	}
	*p = 0;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <f_gets+0x68>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	e000      	b.n	8006fda <f_gets+0x6a>
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006ffa:	4b1f      	ldr	r3, [pc, #124]	; (8007078 <FATFS_LinkDriverEx+0x94>)
 8006ffc:	7a5b      	ldrb	r3, [r3, #9]
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d131      	bne.n	8007068 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007004:	4b1c      	ldr	r3, [pc, #112]	; (8007078 <FATFS_LinkDriverEx+0x94>)
 8007006:	7a5b      	ldrb	r3, [r3, #9]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	461a      	mov	r2, r3
 800700c:	4b1a      	ldr	r3, [pc, #104]	; (8007078 <FATFS_LinkDriverEx+0x94>)
 800700e:	2100      	movs	r1, #0
 8007010:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007012:	4b19      	ldr	r3, [pc, #100]	; (8007078 <FATFS_LinkDriverEx+0x94>)
 8007014:	7a5b      	ldrb	r3, [r3, #9]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	4a17      	ldr	r2, [pc, #92]	; (8007078 <FATFS_LinkDriverEx+0x94>)
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007022:	4b15      	ldr	r3, [pc, #84]	; (8007078 <FATFS_LinkDriverEx+0x94>)
 8007024:	7a5b      	ldrb	r3, [r3, #9]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	4b13      	ldr	r3, [pc, #76]	; (8007078 <FATFS_LinkDriverEx+0x94>)
 800702c:	4413      	add	r3, r2
 800702e:	79fa      	ldrb	r2, [r7, #7]
 8007030:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007032:	4b11      	ldr	r3, [pc, #68]	; (8007078 <FATFS_LinkDriverEx+0x94>)
 8007034:	7a5b      	ldrb	r3, [r3, #9]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	b2d1      	uxtb	r1, r2
 800703c:	4a0e      	ldr	r2, [pc, #56]	; (8007078 <FATFS_LinkDriverEx+0x94>)
 800703e:	7251      	strb	r1, [r2, #9]
 8007040:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007042:	7dbb      	ldrb	r3, [r7, #22]
 8007044:	3330      	adds	r3, #48	; 0x30
 8007046:	b2da      	uxtb	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	3301      	adds	r3, #1
 8007050:	223a      	movs	r2, #58	; 0x3a
 8007052:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3302      	adds	r3, #2
 8007058:	222f      	movs	r2, #47	; 0x2f
 800705a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	3303      	adds	r3, #3
 8007060:	2200      	movs	r2, #0
 8007062:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007064:	2300      	movs	r3, #0
 8007066:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
}
 800706a:	4618      	mov	r0, r3
 800706c:	371c      	adds	r7, #28
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	20000210 	.word	0x20000210

0800707c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007086:	2200      	movs	r2, #0
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff ffaa 	bl	8006fe4 <FATFS_LinkDriverEx>
 8007090:	4603      	mov	r3, r0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <__libc_init_array>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	4d0d      	ldr	r5, [pc, #52]	; (80070d4 <__libc_init_array+0x38>)
 80070a0:	4c0d      	ldr	r4, [pc, #52]	; (80070d8 <__libc_init_array+0x3c>)
 80070a2:	1b64      	subs	r4, r4, r5
 80070a4:	10a4      	asrs	r4, r4, #2
 80070a6:	2600      	movs	r6, #0
 80070a8:	42a6      	cmp	r6, r4
 80070aa:	d109      	bne.n	80070c0 <__libc_init_array+0x24>
 80070ac:	4d0b      	ldr	r5, [pc, #44]	; (80070dc <__libc_init_array+0x40>)
 80070ae:	4c0c      	ldr	r4, [pc, #48]	; (80070e0 <__libc_init_array+0x44>)
 80070b0:	f000 f820 	bl	80070f4 <_init>
 80070b4:	1b64      	subs	r4, r4, r5
 80070b6:	10a4      	asrs	r4, r4, #2
 80070b8:	2600      	movs	r6, #0
 80070ba:	42a6      	cmp	r6, r4
 80070bc:	d105      	bne.n	80070ca <__libc_init_array+0x2e>
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c4:	4798      	blx	r3
 80070c6:	3601      	adds	r6, #1
 80070c8:	e7ee      	b.n	80070a8 <__libc_init_array+0xc>
 80070ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ce:	4798      	blx	r3
 80070d0:	3601      	adds	r6, #1
 80070d2:	e7f2      	b.n	80070ba <__libc_init_array+0x1e>
 80070d4:	0800886c 	.word	0x0800886c
 80070d8:	0800886c 	.word	0x0800886c
 80070dc:	0800886c 	.word	0x0800886c
 80070e0:	08008870 	.word	0x08008870

080070e4 <memset>:
 80070e4:	4402      	add	r2, r0
 80070e6:	4603      	mov	r3, r0
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d100      	bne.n	80070ee <memset+0xa>
 80070ec:	4770      	bx	lr
 80070ee:	f803 1b01 	strb.w	r1, [r3], #1
 80070f2:	e7f9      	b.n	80070e8 <memset+0x4>

080070f4 <_init>:
 80070f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f6:	bf00      	nop
 80070f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070fa:	bc08      	pop	{r3}
 80070fc:	469e      	mov	lr, r3
 80070fe:	4770      	bx	lr

08007100 <_fini>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	bf00      	nop
 8007104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007106:	bc08      	pop	{r3}
 8007108:	469e      	mov	lr, r3
 800710a:	4770      	bx	lr
